var admincontroller = {
    userlisturl : '/admin/userslist',
    adminuserlisturl : '/admin/adminuserslist',
    propertieslisturl : '/admin/propertieslist',
    brlisturl : '/admin/bookingrequestlist',
    loginurl : '/admin/login',
    agentloginurl : '/admin/agentlogin',
    dashboardurl : '/admin/home',
    propertiesurl : '/admin/properties',
    propertiesediturl : '/properties/edit/',
    propertiespreviewurl : '/properties/rooms/',
    userspreviewurl : '/user/publicprofile/',    
    propertyupdurl : '/admin/propertyupd',
    propertyimagesurl : '/admin/propertyimages',
    bookingcancelurl : '/booking/completecancelbooking',
    rejectbookingcancelurl : '/booking/rejectcancelbooking',
    bookingdetailsurl : '/booking/bookingdetailsadmin',
    bookingserveurl : '/admin/updatebookingservestatus',
    agentlisturl : '/admin/agentlist',
    spampropertyurl : '/admin/spampropertyby',
    spamuserurl : '/admin/spamuserby',
    photographypropertiesurl : '/admin/photographyproperties',
    photographypropertieslisturl : '/admin/photographypropertieslist',
    photographypropertyupdurl : '/admin/photographypropertyupd',
    leadslisturl : '/admin/createleadslist',
    uploadconversionlisturl : '/admin/uploadlist',
    manageleadslisturl : '/admin/manageleadslist',
    conversionlisturl : '/admin/conversionlist',
    viewconversionlisturl : '/admin/viewconversionlist',
    leaduserurl : '/admin/leaduser',  
    photographylisturl : '/admin/photographylist',  
    completeleadlisturl : '/admin/completedleadlist', 
    myassignmenturl : '/admin/myassignmentlist', 
    mycallinglisturl : '/admin/mycallinglist',
    assignmentappointmenturl : '/admin/assignphotographerlist',
    assignedphotographyurl : '/admin/assignedphotographylist',
    pendingwithbdurl : '/admin/pendingwithbdlist',
    executiveschedularurl : '/admin/executiveschedularlist',
    photographycompletedurl : '/admin/photographycompletedlist',
    assignedexeschedulerurl : '/admin/assignedexeschedulerlist',

    users_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.userlisturl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'name' },
                    { name: 'email' },
                    // { name: 'country' },
                    // { name: 'state' },
                    // { name: 'city' },
                    // { name: 'area' },
                    // { name: 'zip' },
                    // // { name: 'dial_code' },
                    { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'email_verify' },
                    { name: 'mobile_verify' },
                    { name: 'deactivated_on' },                    
                    { name: 'loginbtn' },
                ],
                id: 'id',
                url: rawurl,
                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                 updaterow: function (rowid, rowdata, commit) {
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    var email_verify = rowdata.email_verify;
                    var mobile_verify = rowdata.mobile_verify;
                    var dial_code = rowdata.dial_code;
                    var contact = rowdata.contact;
                    var secondry_contact = rowdata.secondry_contact;                                        
                    var userid = rowdata.id;
                    $.ajax({
                    url: '/admin/userupdate',
                    type: "POST",
                    data: {/*'dial_code': dial_code, 'contact': contact, 'secondry_contact': secondry_contact,*/ 'email_verify' : email_verify,'mobile_verify' : mobile_verify,'userid' : userid},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                selectionmode: 'checkbox',
                columns: [
                    { text: 'ID', datafield: 'id', width: 50 , editable: false},
                    { text: 'Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Email', datafield: 'email', width: 150, editable: false,hidden:true},
                    // { text: 'Country', datafield: 'country', width: 100, editable: false},
                    // { text: 'State', datafield: 'state', width: 100, editable: false},
                    // { text: 'City', datafield: 'city', width: 80, editable: false},
                    // { text: 'Area', datafield: 'area', width: 80, editable: false},
                    // { text: 'Zip', datafield: 'zip', width: 80, editable: false},
                    // { text: 'Dial Code', datafield: 'dial_code', width: 40, editable: true},
                    { text: 'Primary Contact', datafield: 'contact', width: 100, editable: true,hidden:true},
                    // { text: 'Sec. Contact', datafield: 'secondry_contact', width: 100, editable: true},
                    { text: 'Email Verify', datafield: 'email_verify', width: 100 ,columntype: 'checkbox', filtertype: 'bool'},
                    { text: 'Mobile Verify', datafield: 'mobile_verify', width: 100 ,columntype: 'checkbox', filtertype: 'bool'},
                    { text: 'Deactivated On', datafield: 'deactivated_on', width: 100, editable: false},

                ]
            });

            //## Save Btn Click ----------------------------
            // custom search
            //setup before functions
            var typingTimer;                //timer identifier
            var doneTypingInterval = 1000;  //time in ms, 5 second for example

            //on keyup, start the countdown
            $('#txtSearch').keyup(function(){
                clearTimeout(typingTimer);
                typingTimer = setTimeout(performSearch, doneTypingInterval);
            });

            //on keydown, clear the countdown 
            $('#txtSearch').keydown(function(){
                clearTimeout(typingTimer);
            });

            //user is "finished typing," do something
            function performSearch() {
                //do something
                var searchText = $("#txtSearch").val();
                if (searchText.length > 0) {
                    var filtergroup = new $.jqx.filter();
                    var filtervalue = searchText;
                    var filtercondition = 'contains';
                    var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
                    // used when there are multiple filters on a grid column:
                    var filter_or_operator = 1;
                    // console.log(filter);
                    // return;
                    // used when there are multiple filters on the grid:
                    filtergroup.operator = 'or';
                    filtergroup.addfilter(filter_or_operator, filter);
                    // console.log(filtergroup);
                    if($.isNumeric(searchText)){
                        $(jqxgridid).jqxGrid('addfilter', 'contact', filtergroup);
                        $(jqxgridid).jqxGrid('removefilter', 'email', filtergroup);
                    }
                    else{
                        $(jqxgridid).jqxGrid('addfilter', 'email', filtergroup);
                        $(jqxgridid).jqxGrid('removefilter', 'contact', filtergroup);
                    }
                    // $(jqxgridid).jqxGrid('addfilter', 'contact', filtergroup);
                    // $(jqxgridid).jqxGrid('addfilter', 'lastname', filtergroup);
                    // apply the filters.
                    $(jqxgridid).jqxGrid('applyfilters');
                }
                else {
                    $(jqxgridid).jqxGrid('clearfilters');
                }
            }


            $(document).on('click','.login-btn',function(){
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please Select a Single User . . . .');
                     return;
                }

                $('#message').show();
                $('#message').html('Please Wait ....');
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                //var userid = $(this).data('userid');
                var userid = datarow.id;
                $.ajax({
                    url: self.loginurl,
                    type: "POST",
                    data: {'userid' : userid},
                    success: function (data, textStatus, jqXHR) {

                        $('#message').html('Successfully Logged In.');
                        window.location.reload();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });

           $('#viewcontact-btn').click(function(){
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please Select a Single User . . . .');
                     return;
                }

                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
                

            });



        }); // end document.ready func

    }, // end users usersgird func


     properties_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.propertieslisturl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    { name: 'email' },
                    // { name: 'dial_code' },
                    { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    // { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'cfnotes' },

                    { name: 'photo_status' },
                    { name: 'photo_status_title' },
                    { name: 'instant_book' },
                    { name: 'cash_on_arrival' },
                    { name: 'converted_by_user' },
                    { name: 'listed_by_user' },
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);

                    var propertyid = rowdata.id;
                    var status = rowdata.status;
                    // var featured = rowdata.featured;
                    var enabled = rowdata.enabled;
                    var payment_detail = rowdata.payment_detail;
                    var cfnotes = rowdata.cfnotes;
                    var photo_status = rowdata.photo_status;

                    var search_keyword = rowdata.search_keyword;
                    var address = rowdata.address;
                    var area = rowdata.area;
                    var instant_book = rowdata.instant_book;
                    var cash_on_arrival = rowdata.cash_on_arrival;
                    
                    $.ajax({
                    url: self.propertyupdurl,
                    type: "POST",
                    data: {'propertyid' : propertyid,'status' : status,'enabled' : enabled,'payment_detail' : payment_detail,'cfnotes' : cfnotes,'photo_status' : photo_status,'search_keyword' : search_keyword,'address' : address,'area' : area,'instant_book' : instant_book,'cash_on_arrival' : cash_on_arrival},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'ID', datafield: 'id', width: 50 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 50, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Email', datafield: 'email', width: 150, editable: false, hidden: true},
                    // { text: 'Dial code', datafield: 'dial_code', width: 50, editable: false},
                    { text: 'PrimaryContact', datafield: 'contact', width: 100, editable: false, hidden: true},
                    // { text: 'Sec. Contact', datafield: 'secondry_contact', width: 100, editable: false},

                    { text: 'Notes', datafield: 'cfnotes', width: 100, editable: true},
                    // { text: 'Featured', datafield: 'featured', width: 100 ,columntype: 'checkbox', filtertype: 'bool'},

                    { text: 'Status', datafield: 'status', width: 100,  displayfield: 'status_title', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: propertystatusAdapter, displayMember: 'status_title', valueMember: 'status_id' });
                        }
                    },
                    { text: 'Enabled', datafield: 'enabled', width: 100 ,columntype: 'checkbox', filtertype: 'bool'},
                    { text: 'Photography', datafield: 'photo_status', width: 100,  displayfield: 'photo_status_title', columntype: 'dropdownlist',filterable:false,
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: photographystatusAdapter, displayMember: 'photo_status_title', valueMember: 'photo_status_id' });
                        }
                    },                    
                    { text: 'Payment Detail', datafield: 'payment_detail', width: 100,  displayfield: 'payment_detail', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            
                            editor.jqxDropDownList({ source: paymentdetailAdapter });
                        }
                    },
                    { text: 'Title', datafield: 'title', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    { text: 'Search Keyword', datafield: 'search_keyword', width: 100, editable: true},
                    { text: 'Address', datafield: 'address', width: 100, editable: true,hidden:true},
                    { text: 'Area', datafield: 'area', width: 100, editable: true},
                    { text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 100, editable: false},
                    { text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                    { text: 'Created At', datafield: 'created_at', width: 100, filtercondition : 'CONTAINS', editable: false},
                    { text: 'Update At', datafield: 'updated_at', width: 100, filtercondition : 'CONTAINS', editable: false},
                    { text: 'Deleted At', datafield: 'deleted_at', width: 100, filtercondition : 'CONTAINS', editable: false},
                    { text: 'Instant Book', datafield: 'instant_book', width: 100 ,columntype: 'checkbox', filtertype: 'bool'},
                    { text: 'Cash On Arrival', datafield: 'cash_on_arrival', width: 150 ,columntype: 'checkbox', filtertype: 'bool'},
                    { text: 'Converted By', datafield: 'converted_by_user', width: 100, filtercondition : 'CONTAINS', editable: false},
                    { text: 'Listed By', datafield: 'listed_by_user', width: 100, filtercondition : 'CONTAINS', editable: false},

                    
                ]
            });
            

            //## Save Btn Click --------------------------- -
            // custom search
            //setup before functions
            var typingTimer;                //timer identifier
            var doneTypingInterval = 1000;  //time in ms, 5 second for example

            //on keyup, start the countdown
            $('#txtSearch').keyup(function(){
                clearTimeout(typingTimer);
                typingTimer = setTimeout(performSearch, doneTypingInterval);
            });

            //on keydown, clear the countdown 
            $('#txtSearch').keydown(function(){
                clearTimeout(typingTimer);
            });

            //user is "finished typing," do something
            function performSearch() {
                //do something
                var searchText = $("#txtSearch").val();
                if (searchText.length > 0) {
                    var filtergroup = new $.jqx.filter();
                    var filtervalue = searchText;
                    var filtercondition = 'contains';
                    var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
                    // used when there are multiple filters on a grid column:
                    var filter_or_operator = 1;
                    // console.log(filter);
                    // return;
                    // used when there are multiple filters on the grid:
                    filtergroup.operator = 'or';
                    filtergroup.addfilter(filter_or_operator, filter);
                    // console.log(filtergroup);
                    if($.isNumeric(searchText)){
                        $(jqxgridid).jqxGrid('addfilter', 'contact', filtergroup);
                        $(jqxgridid).jqxGrid('removefilter', 'email', filtergroup);
                        $(jqxgridid).jqxGrid('removefilter', 'address', filtergroup);
                    }
                    else if(searchText.indexOf('@') != -1){
                        $(jqxgridid).jqxGrid('addfilter', 'email', filtergroup);
                        $(jqxgridid).jqxGrid('removefilter', 'contact', filtergroup);
                        $(jqxgridid).jqxGrid('removefilter', 'address', filtergroup);
                    }
                    else{
                        $(jqxgridid).jqxGrid('addfilter', 'address', filtergroup);
                        $(jqxgridid).jqxGrid('removefilter', 'email', filtergroup);
                        $(jqxgridid).jqxGrid('removefilter', 'contact', filtergroup);
                    }

                    // $(jqxgridid).jqxGrid('addfilter', 'contact', filtergroup);
                    // $(jqxgridid).jqxGrid('addfilter', 'lastname', filtergroup);
                    // apply the filters.
                    $(jqxgridid).jqxGrid('applyfilters');
                }
                else {
                    $(jqxgridid).jqxGrid('clearfilters');
                }
            }

//trigger filter on notification button click
$('body').on('click','.notif-filter',function(){
    set_filter($(this).data('filtercol'),$(this).data('filterval'));
});

$('body').on('click','.reset-filter',function(){
    $(jqxgridid).jqxGrid('clearfilters');
});

function set_filter(colname,val){
        var searchText = val.split(',');
        var colname = colname.split(',');

        // $("#jqxgrid").jqxGrid('removefilter', 'firstname');
        var filtergroup = new $.jqx.filter();
        var filtervalue = searchText;
        var filtercondition = 'contains';
        var filter = [];
        for (var i = searchText.length - 1; i >= 0; i--) {
          filter.push(filtergroup.createfilter('stringfilter', searchText[i], filtercondition));  
        };

        // used when there are multiple filters on a grid column:
        var filter_or_operator = 1;
        // used when there are multiple filters on the grid:
        filtergroup.operator = 'or';
        for (var i = filter.length - 1; i >= 0; i--) {
                filtergroup.addfilter(filter_or_operator, filter[i]);
        };

        //remove other filters
        for (var i = colname.length - 1; i >= 0; i--) {
            $(jqxgridid).jqxGrid('addfilter', colname[i], filtergroup);
        };
        cols = ['id','user_id','admin_score','name','email','contact','cfnotes','status_title','enabled','title','property_type_title','search_keyword','address','area','city','state','country','zipcode','created_at','updated_at','deleted_at','instant_book', 'cash_on_arrival','converted_by_user','listed_by_user'];

        if(colname.length == 1){
            if(colname == 'enabled')
            $(jqxgridid).jqxGrid('removefilter', 'status_title', filtergroup);
        else
            $(jqxgridid).jqxGrid('removefilter', 'enabled', filtergroup);
            
        }

        $(jqxgridid).jqxGrid('applyfilters');     
}            
//trigger filter on notification button click



            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                $.ajax({
                    url: self.loginurl,
                    type: "POST",
                    data: {'userid' : userid},
                    success: function (data, textStatus, jqXHR) {
                       // window.location.href = self.propertiesediturl + propertyid ;
                       window.open(self.propertiespreviewurl + propertyid,'_blank'); 
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });

            
            $('#viewcontact-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        $('#contact_modal').find('#user_contact_info').html(data);
                        $('#contact_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });

            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });

            // show under review property on click Under Review button
            $(document).ready(function() {
                $('.under-review').click(function() { 
                //do something
                
                });
            });
        
            /*
            $('#updatestatus-btn').click(function(){

                if (selectedrowindex==-1) {
                    alert("Please Select Property First");
                } else {
                    var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                    var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                    //console.log(datarow.status);
                    $('select[name="status"]').val(datarow.status);
                    $('#updatestatus-modal').modal('show');
                }
                
            });

             $('#updatestatus-modal .savebtn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');

                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var propertyid = datarow.id;
                var status = $('select[name="status"]').val();
                var status_title = $('select[name="status"] :selected').text();

                $.ajax({
                    url: self.propertyupdurl,
                    type: "POST",
                    data: {'propertyid' : propertyid,'status' : status},
                    success: function (data, textStatus, jqXHR) {
                        $('#updatestatus-modal').modal('hide');
                        //$(jqxgridid).jqxGrid('updatebounddata');
                        $("#jqxgrid").jqxGrid('setcellvalue', selectedrowindex, 'status', status);
                        $("#jqxgrid").jqxGrid('setcellvalue', selectedrowindex, 'status_title', status_title);

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 

             }); */

            
            
            $('#viewrating-btn').click(function(){
                $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                $.ajax({
                    url: '/admin/ratingdata',
                    type: "POST",
                    data: {'propertyid' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        
                    if (data != 0) {
                        $("#param_6").jqxRating('setValue', data.param_6);
                        $("#param_7").jqxRating('setValue', data.param_7);
                        $("#param_8").jqxRating('setValue', data.param_8);
                        $("#param_9").jqxRating('setValue', data.param_9);
                        $("#param_10").jqxRating('setValue', data.param_10);
                        $("#param_11").jqxRating('setValue', data.param_11);
                    } else {
                        $("#param_6").jqxRating('setValue', 0);
                        $("#param_7").jqxRating('setValue', 0);
                        $("#param_8").jqxRating('setValue', 0);
                        $("#param_9").jqxRating('setValue', 0);
                        $("#param_10").jqxRating('setValue',0);
                        $("#param_11").jqxRating('setValue',0);

                    }

                    $('#viewrating-btn').val('View Rating');
                    $('#rating-modal').modal('show');



                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
                

            });


            $(jqxgridid).bind('rowselect', function (event) {
                var row = event.args.rowindex;
            });

            $(".setzero").click(function(){
                var paramid = $(this).data('id');
                 $("#"+paramid).jqxRating('setValue', 0);

            })
            $(".rating").jqxRating({ width: 350, height: 35, theme: 'classic'});
            $(".rating").on('change', function (event) {
                // console.log($(this).attr('id'));
              //  $("#rate").find('span').remove();
               // $("#rate").append('<span>' + event.value + '</span');
            });

            //$("#param_1").jqxRating('setValue', 2);


            $('#rating_savebtn').click(function(){
                $(this).text('Progressing..');
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var propertyid = datarow.id;

                $.ajax({
                    url: '/admin/ratingsave',
                    type: "POST",
                    data: {
                        'propertyid' : propertyid,
                        'score_6' : $("#param_6").jqxRating('getValue'),
                        'score_7' : $("#param_7").jqxRating('getValue'),
                        'score_8' : $("#param_8").jqxRating('getValue'),
                        'score_9' : $("#param_9").jqxRating('getValue'),
                        'score_10' : $("#param_10").jqxRating('getValue'),
                        'score_11' : $("#param_11").jqxRating('getValue')
                    },
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $("#jqxgrid").jqxGrid('setcellvalue', selectedrowindex, 'admin_score', data.score);
                        $('#rating-modal').modal('hide');
                        $('#rating_savebtn').text('Save');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 

            });


        }); // end document.ready func

    }, // end users properties_grid func

    photography_properties_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.photographypropertieslisturl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    // { name: 'email' },
                    // { name: 'dial_code' },
                    // { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    // { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'cfnotes' },

                    { name: 'photo_status' },
                    { name: 'photo_status_title' },
                    { name: 'instant_book' },
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);

                    var propertyid = rowdata.id;
                    // var status = rowdata.status;
                    // var featured = rowdata.featured;
                    // var enabled = rowdata.enabled;
                    // var payment_detail = rowdata.payment_detail;
                    // var cfnotes = rowdata.cfnotes;
                    var photo_status = rowdata.photo_status;

                    // var search_keyword = rowdata.search_keyword;
                    // var address = rowdata.address;
                    // var area = rowdata.area;
                    // var instant_book = rowdata.instant_book;
                    
                    $.ajax({
                    url: self.photographypropertyupdurl,
                    type: "POST",
                    data: {'propertyid' : propertyid, 'photo_status' : photo_status},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'ID', datafield: 'id', width: 50 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 50, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Name', datafield: 'name', width: 150, editable: false},
                    // { text: 'Email', datafield: 'email', width: 150, editable: false},
                    // { text: 'Dial code', datafield: 'dial_code', width: 50, editable: false},
                    // { text: 'PrimaryContact', datafield: 'contact', width: 100, editable: false},
                    // { text: 'Sec. Contact', datafield: 'secondry_contact', width: 100, editable: false},

                    { text: 'Notes', datafield: 'cfnotes', width: 100, editable: true},
                    // { text: 'Featured', datafield: 'featured', width: 100 ,columntype: 'checkbox', filtertype: 'bool'},

                    { text: 'Status', datafield: 'status', width: 100,  displayfield: 'status_title', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: propertystatusAdapter, displayMember: 'status_title', valueMember: 'status_id' });
                        }
                    },
                    { text: 'Photography', datafield: 'photo_status', width: 100,  displayfield: 'photo_status_title', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: photographystatusAdapter, displayMember: 'photo_status_title', valueMember: 'photo_status_id' });
                        }
                    },                    
                    // { text: 'Payment Detail', datafield: 'payment_detail', width: 100,  displayfield: 'payment_detail', columntype: 'dropdownlist',
                    //     createeditor: function (row, value, editor) {
                            
                    //         editor.jqxDropDownList({ source: paymentdetailAdapter });
                    //     }
                    // },
                    { text: 'Enabled', datafield: 'enabled', width: 100 ,columntype: 'checkbox', filtertype: 'bool'},
                    { text: 'Title', datafield: 'title', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    { text: 'Search Keyword', datafield: 'search_keyword', width: 100, editable: true},
                    // { text: 'Address', datafield: 'address', width: 100, editable: true},
                    { text: 'Area', datafield: 'area', width: 100, editable: true},
                    { text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 100, editable: false},
                    { text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                    { text: 'Created At', datafield: 'created_at', width: 100, filtercondition : 'CONTAINS', editable: false},
                    { text: 'Update At', datafield: 'updated_at', width: 100, filtercondition : 'CONTAINS', editable: false},
                    { text: 'Deleted At', datafield: 'deleted_at', width: 100, filtercondition : 'CONTAINS', editable: false},
                    // { text: 'Instant Book', datafield: 'instant_book', width: 100 ,columntype: 'checkbox', filtertype: 'bool'}
                    
                ]
            });
            

            //## Save Btn Click --------------------------- -



            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });



        
            /*
            $('#updatestatus-btn').click(function(){

                if (selectedrowindex==-1) {
                    alert("Please Select Property First");
                } else {
                    var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                    var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                    //console.log(datarow.status);
                    $('select[name="status"]').val(datarow.status);
                    $('#updatestatus-modal').modal('show');
                }
                
            });

             $('#updatestatus-modal .savebtn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');

                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var propertyid = datarow.id;
                var status = $('select[name="status"]').val();
                var status_title = $('select[name="status"] :selected').text();

                $.ajax({
                    url: self.propertyupdurl,
                    type: "POST",
                    data: {'propertyid' : propertyid,'status' : status},
                    success: function (data, textStatus, jqXHR) {
                        $('#updatestatus-modal').modal('hide');
                        //$(jqxgridid).jqxGrid('updatebounddata');
                        $("#jqxgrid").jqxGrid('setcellvalue', selectedrowindex, 'status', status);
                        $("#jqxgrid").jqxGrid('setcellvalue', selectedrowindex, 'status_title', status_title);

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 

             }); */

            
            
            $('#viewrating-btn').click(function(){
                $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                $.ajax({
                    url: '/admin/ratingdata',
                    type: "POST",
                    data: {'propertyid' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        
                    if (data != 0) {
                        $("#param_6").jqxRating('setValue', data.param_6);
                        $("#param_7").jqxRating('setValue', data.param_7);
                        $("#param_8").jqxRating('setValue', data.param_8);
                        $("#param_9").jqxRating('setValue', data.param_9);
                        $("#param_10").jqxRating('setValue', data.param_10);
                        $("#param_11").jqxRating('setValue', data.param_11);
                    } else {
                        $("#param_6").jqxRating('setValue', 0);
                        $("#param_7").jqxRating('setValue', 0);
                        $("#param_8").jqxRating('setValue', 0);
                        $("#param_9").jqxRating('setValue', 0);
                        $("#param_10").jqxRating('setValue',0);
                        $("#param_11").jqxRating('setValue',0);

                    }

                    $('#viewrating-btn').val('View Rating');
                    $('#rating-modal').modal('show');



                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
                

            });


            $(jqxgridid).bind('rowselect', function (event) {
                var row = event.args.rowindex;
            });

            $(".setzero").click(function(){
                var paramid = $(this).data('id');
                 $("#"+paramid).jqxRating('setValue', 0);

            })
            $(".rating").jqxRating({ width: 350, height: 35, theme: 'classic'});
            $(".rating").on('change', function (event) {
                // console.log($(this).attr('id'));
              //  $("#rate").find('span').remove();
               // $("#rate").append('<span>' + event.value + '</span');
            });

            //$("#param_1").jqxRating('setValue', 2);


            $('#rating_savebtn').click(function(){
                $(this).text('Progressing..');
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var propertyid = datarow.id;

                $.ajax({
                    url: '/admin/ratingsave',
                    type: "POST",
                    data: {
                        'propertyid' : propertyid,
                        'score_6' : $("#param_6").jqxRating('getValue'),
                        'score_7' : $("#param_7").jqxRating('getValue'),
                        'score_8' : $("#param_8").jqxRating('getValue'),
                        'score_9' : $("#param_9").jqxRating('getValue'),
                        'score_10' : $("#param_10").jqxRating('getValue'),
                        'score_11' : $("#param_11").jqxRating('getValue')
                    },
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $("#jqxgrid").jqxGrid('setcellvalue', selectedrowindex, 'admin_score', data.score);
                        $('#rating-modal').modal('hide');
                        $('#rating_savebtn').text('Save');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 

            });


        }); // end document.ready func

    }, // end users properties_grid func


    br_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.brlisturl;
            //var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'booking_request_code' },
                    { name: 'pid' },
                    { name: 'title' },
                    { name: 'host_id' },
                    { name: 'hostemail' },
                    { name: 'traveller_id' },
                    { name: 'email' },
                    { name: 'units' },
                    { name: 'from_date' },
                    { name: 'to_date' },
                    { name: 'booking_status' },
                    { name: 'status_title' },
                    { name: 'country' },
                    { name: 'state' },
                    { name: 'city' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'serve_status' },                    
                    { name: 'serve_title' },                    
                    { name: 'served_by' },                    
                    
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);

                    var brid = rowdata.id;
                    var status = rowdata.served_status;
                    var served_by = rowdata.served_by;
                    $.ajax({
                    url: self.bookingserveurl,
                    type: "get",
                    data: {'request_id' : brid,'status' : status,'served_by' : served_by},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'ID', datafield: 'id', width: 50 , editable: false},
                    { text: 'Status', datafield: 'booking_status', width: 160,editable: false,  displayfield: 'status_title', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: bookingstatusAdapter, displayMember: 'status_title', valueMember: 'status_id' });
                        }
                    },
                    { text: 'PropertyID', datafield: 'pid', width: 80, editable: false},
                    { text: 'Title', datafield: 'title', width: 100, editable: false},
                    { text: 'HostID', datafield: 'host_id', width: 50, editable: false},
                    { text: 'Hostemail', datafield: 'hostemail', width: 150, editable: false},
                    { text: 'TravellerID', datafield: 'traveller_id', width: 80, editable: false},
                    { text: 'Email', datafield: 'email', width: 150, editable: false},
                    { text: 'Units', datafield: 'units', width: 50, editable: false},
                    { text: 'FromDate', datafield: 'from_date' ,filtercondition : 'CONTAINS',  width: 100, editable: false},
                    { text: 'ToDate', datafield: 'to_date' ,filtercondition : 'CONTAINS', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'Served Status', datafield: 'served_status', width: 100,  displayfield: 'serve_title', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: bookingservestatusAdapter, displayMember: 'serve_title', valueMember: 'serve_id' });
                        }
                    },
                    { text: 'Served By', datafield: 'served_by', width: 130, editable: true},
                    { text: 'Created On', datafield: 'created_at' ,filtercondition : 'CONTAINS', width: 130, editable: false},
                    { text: 'Updated On', datafield: 'updated_at' ,filtercondition : 'CONTAINS', width: 130, editable: false},        
                    { text: 'Request Code', datafield: 'booking_request_code', width: 80, editable: false},

                ]
            });


//trigger filter on notification button click
$('body').on('click','.notif-filter',function(){
    set_filter($(this).data('filtercol'),$(this).data('filterval'));
});

$('body').on('click','.reset-filter',function(){
    $(jqxgridid).jqxGrid('clearfilters');
});

function set_filter(colname,val){
        var searchText = val;
        // $("#jqxgrid").jqxGrid('removefilter', 'firstname');
        var filtergroup = new $.jqx.filter();
        var filtervalue = searchText;
        var filtercondition = 'contains';
        var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
        // used when there are multiple filters on a grid column:
        var filter_or_operator = 1;
        // used when there are multiple filters on the grid:
        filtergroup.operator = 'or';
        filtergroup.addfilter(filter_or_operator, filter);
        //remove other filters
        $(jqxgridid).jqxGrid('addfilter', colname, filtergroup);
        $(jqxgridid).jqxGrid('applyfilters');     
}            
//trigger filter on notification button click


            
            //approve booking cancellation click
            $(document).on('click','#admincancelbooking-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                //var userid = $(this).data('userid');
                if(!datarow) return;
                var requestid = datarow.id;

                var userid = datarow.user_id;
                $.ajax({
                    url: self.bookingcancelurl,
                    type: "get",
                    data: {'request_id' : requestid},
                    dataType: 'json',
                    success: function (data, textStatus, jqXHR) {
                        // alert(data.message);
                        if (data.success == 1) {
                            $('#booking-details-modal').modal('hide');
                        }

                        //alert(data);
                       // window.location.href = self.propertiesediturl + propertyid ;
                       // window.open(self.propertiespreviewurl + propertyid,'_blank'); 
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });
            
            //reject booking cancellation click
            $(document).on('click','#rejectcancelbooking-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                //var userid = $(this).data('userid');
                if(!datarow) return;
                var requestid = datarow.id;

                var userid = datarow.user_id;
                $.ajax({
                    url: self.rejectbookingcancelurl,
                    type: "get",
                    data: {'request_id' : requestid},
                    dataType: 'json',
                    success: function (data, textStatus, jqXHR) {
                        // alert(data.message);
                        if (data.success == 1) {
                            $('#booking-details-modal').modal('hide');
                        }
                        //alert(data);
                       // window.location.href = self.propertiesediturl + propertyid ;
                       // window.open(self.propertiespreviewurl + propertyid,'_blank'); 
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });

            //view booking details button
            $(document).on('click','#booking_details_btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                //var userid = $(this).data('userid');
                if(!datarow){
                    alert('Select a row first.');            
                    return;
                }
                var requestid = datarow.id;
                var userid = datarow.user_id;
                $('#booking-details-modal').modal('show');
                $('#booking_details_cont').html('Loading Details...');

                $.ajax({
                    url: self.bookingdetailsurl,
                    type: "get",
                    data: {'request_id' : requestid},
                    success: function (data, textStatus, jqXHR) {
                        $('#booking_details_cont').html(data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });

            

        }); // end document.ready func

    }, // end users br_grid func

   admin_users_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.adminuserlisturl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'name' },
                    { name: 'email' },
                    { name: 'email' },
                    { name: 'role_id' },
                    { name: 'role_title' },
                    { name: 'total_listings' },
                    { name: 'total_conversions' },
                    { name: 'is_enabled' },                    
                    
                    { name: 'created_at' },
                    { name: 'updated_at' },                    
                ],
                id: 'id',
                url: rawurl,
                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                 updaterow: function (rowid, rowdata, commit) {
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    var id = rowdata.id;
                    var name = rowdata.mobile_verify;
                    var role = rowdata.role_id;
                    var is_enabled = rowdata.is_enabled;
                    

                    $.ajax({
                    url: '/admin/adminuserupdate',
                    type: "POST",
                    data: {'id': id, 'name': name, 'is_enabled': is_enabled, 'role': role},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                columns: [
                    { text: 'Id', datafield: 'id', width: 50 , editable: false},
                    { text: 'Name', datafield: 'name', width: 200, editable: false},
                    { text: 'Email', datafield: 'email', width: 200, editable: false},
                    { text: 'Role', datafield: 'role_id', width: 200,editable: true,  displayfield: 'role_title', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: adminroleAdapter, displayMember: 'role_title', valueMember: 'role_id' });
                        }
                    },                    
                    { text: 'Conversions', datafield: 'total_conversions', width: 100, editable: false},
                    { text: 'Listings', datafield: 'total_listings', width: 100, editable: false},
                    { text: 'Enabled', datafield: 'is_enabled', width: 100 ,columntype: 'checkbox', filtertype: 'bool'},
                    { text: 'updated on', datafield: 'updated_at', width: 200, editable: false},
                    { text: 'created on', datafield: 'created_at', width: 200, editable: false},
                   ]
            });

            //## Save Btn Click ----------------------------

            $(document).on('click','.login-btn',function(){
                $('#message').show();
                $('#message').html('Please Wait ....');
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                //var userid = $(this).data('userid');
                var userid = datarow.id;
                $.ajax({
                    url: self.loginurl,
                    type: "POST",
                    data: {'userid' : userid},
                    success: function (data, textStatus, jqXHR) {

                        $('#message').html('Successfully Logged In.');
                        window.location.href = self.dashboardurl;
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });
        }); // end document.ready func

    }, // end users usersgird func
    admin_spam_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.spampropertyurl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'propertyid' },
                    { name: 'property_title' },
                    { name: 'spam_count' },
                    { name: 'unresolved' },                    
                                
                    
                    { name: 'created_at' },
                    { name: 'updated_at' },                    
                ],
                id: 'id',
                url: rawurl,
                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                }
                
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                columns: [
                    { text: 'Id', datafield: 'id', width: 50 , editable: false},
                    { text: 'Property Id', datafield: 'propertyid', width: 200, editable: false},
                    { text: 'Property Title', datafield: 'property_title', width: 200, editable: false},
                    { text: 'Spam Count', datafield: 'spam_count', width: 100,editable: false},
                    { text: 'Unresolved', datafield: 'unresolved', width: 100,editable: false},                                                        
                    { text: 'Updated on', datafield: 'updated_at', width: 200, editable: false},
                    { text: 'Created on', datafield: 'created_at', width: 200, editable: false},
                   ]
            });


             $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                //var userid = $(this).data('userid');
                var propertyid = datarow.propertyid;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });

            $('#spamdetails-btn').click(function(){
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                $('#property_title').html(datarow.property_title);
                $('#property_id').html(datarow.propertyid);                

                $.ajax({
                    url: '/admin/propertyspamdetails',
                    type: "POST",
                    data: {'spamid' : datarow.propertyid},
                    success: function (data, textStatus, jqXHR) {
                        
                        $('#spam-modal').modal('show');
                        $('#spam-modal').find('.modal-body').html(data);

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
                

            });

            //## Save Btn Click ----------------------------

            // $(document).on('click','.login-btn',function(){
            //     $('#message').show();
            //     $('#message').html('Please Wait ....');
            //     var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
            //     var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
            //     //var userid = $(this).data('userid');
            //     var userid = datarow.id;
            //     $.ajax({
            //         url: self.loginurl,
            //         type: "POST",
            //         data: {'userid' : userid},
            //         success: function (data, textStatus, jqXHR) {

            //             $('#message').html('Successfully Logged In.');
            //             window.location.href = self.dashboardurl;
            //         },
            //         error: function (jqXHR, textStatus, errorThrown) {
            //             // error check
            //         }
            //     }); // end ajax 
            // });
        }); // end document.ready func

    }, // end users usersgird func
    admin_spamuser_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.spamuserurl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'userid' },
                    { name: 'username' },
                    { name: 'useremail' },                    
                    { name: 'spam_count' },
                    { name: 'unresolved' },                                
                    
                    { name: 'created_at' },
                    { name: 'updated_at' },                    
                ],
                id: 'id',
                url: rawurl,
                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                }
                
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                columns: [
                    { text: 'Id', datafield: 'id', width: 50 , editable: false},
                    { text: 'User Id', datafield: 'userid', width: 200, editable: false},
                    { text: 'User Name', datafield: 'username', width: 200, editable: false},
                    { text: 'User Email', datafield: 'useremail', width: 200, editable: false},                    
                    { text: 'Spam Count', datafield: 'spam_count', width: 100,editable: false},
                    { text: 'Unresolved', datafield: 'unresolved', width: 100,editable: false},                                                        
                    { text: 'Updated on', datafield: 'updated_at', width: 200, editable: false},
                    { text: 'Created on', datafield: 'created_at', width: 200, editable: false},
                   ]
            });


             $(document).on('click','#viewuser-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                //var userid = $(this).data('userid');
                // var propertyid = datarow.propertyid;
                var userid = datarow.userid;
                window.open(self.userspreviewurl + userid,'_blank'); 

            });

            $('#spamdetails-btn').click(function(){
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                $('#user_email').html(datarow.useremail);
                $('#user_id').html(datarow.userid);                

                $.ajax({
                    url: '/admin/userspamdetails',
                    type: "POST",
                    data: {'spamid' : datarow.userid},
                    success: function (data, textStatus, jqXHR) {
                        
                        $('#spam-modal').modal('show');
                        $('#spam-modal').find('.modal-body').html(data);

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
                

            });

                // $('body').on('click','#resolvespam-btn',function(){
                    // alert();
                  // var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                  // var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                  // var data = {};
                  // data.spam = [];
                  // $(".spam-tbody input:checked").each(function() {
                  // data.spam.push($(this).attr('value'));
                  // });
                  
                  //  console.log(data.spam);
                  //  console.log(data);
                  // $.ajax({
                  //     url:'/admin/resolvespamproperties',
                  //     type:"post",
                  //     data:{

                  //       data:data,
                  //       // '_token' : $("input[name='_token']").val()
                  //     },
                  //     success:function(data){
                  //       if(data.status==1)
                  //       { 
                  //           $("#jqxgrid").jqxGrid('setcellvalue', selectedrowindex, 'unresolved', data.unresolved);                        
                  //         $('#spam-modal').modal('hide');
                  //         location.reload(true);              
                  //       }

                  //     }
                  // });

                // });

            //## Save Btn Click ----------------------------

            // $(document).on('click','.login-btn',function(){
            //     $('#message').show();
            //     $('#message').html('Please Wait ....');
            //     var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
            //     var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
            //     //var userid = $(this).data('userid');
            //     var userid = datarow.id;
            //     $.ajax({
            //         url: self.loginurl,
            //         type: "POST",
            //         data: {'userid' : userid},
            //         success: function (data, textStatus, jqXHR) {

            //             $('#message').html('Successfully Logged In.');
            //             window.location.href = self.dashboardurl;
            //         },
            //         error: function (jqXHR, textStatus, errorThrown) {
            //             // error check
            //         }
            //     }); // end ajax 
            // });
        }); // end document.ready func

    },
   admin_agents_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.agentlisturl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    { name: 'email' },
                    { name: 'company_name' },
                    { name: 'pan_number' },
                    { name: 'level' },
                    { name: 'properties_count' },
                    { name: 'bookings_count' },
                    { name: 'level_name' },                    
                    { name: 'is_agent' },
                    { name: 'created_at' },
                    { name: 'updated_at' },                    
                ],
                id: 'id',
                url: rawurl,
                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                 updaterow: function (rowid, rowdata, commit) {
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    var id = rowdata.id;
                    var user_id = rowdata.user_id;
                    var is_agent = rowdata.is_agent;
                    var level = rowdata.level;

                    $.ajax({
                    url: '/admin/agentupdate',
                    type: "POST",
                    data: {'user_id': user_id, 'is_agent': is_agent,'id':id,'level':level},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                columns: [
                    { text: 'AgentId', datafield: 'id', width: 50 , editable: false},
                    { text: 'userid', datafield: 'user_id', width: 50 , editable: false},
                    { text: 'Name', datafield: 'name', width: 200, editable: false},
                    { text: 'Company Name', datafield: 'company_name', width: 200, editable: false},
                    { text: 'Email', datafield: 'email', width: 200, editable: false},
                    { text: 'Pan No.', datafield: 'pan_number', width: 200, editable: false},
                    // { text: 'Level', datafield: 'level', width: 200, editable: false},

                    { text: 'Level', datafield: 'level', width: 100,  displayfield: 'level_name', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: agentlevelAdapter, displayMember: 'level_name', valueMember: 'level_id' });
                        }
                    },
                    { text: 'Properties Count', datafield: 'properties_count', width: 100, editable: false},                    
                    { text: 'Bookings Count', datafield: 'bookings_count', width: 100, editable: false},

                    { text: 'Enabled', datafield: 'is_agent', width: 100 ,columntype: 'checkbox', filtertype: 'bool'},
                    { text: 'updated on', datafield: 'updated_at', width: 200, editable: false},
                    { text: 'created on', datafield: 'created_at', width: 200, editable: false},
                   ]
            });


//trigger filter on notification button click
$('body').on('click','.notif-filter',function(){
    set_filter($(this).data('filtercol'),$(this).data('filterval'));
});

$('body').on('click','.reset-filter',function(){
    $(jqxgridid).jqxGrid('clearfilters');
});

function set_filter(colname,val){
        var searchText = val;
        // $("#jqxgrid").jqxGrid('removefilter', 'firstname');
        var filtergroup = new $.jqx.filter();
        var filtervalue = searchText;
        var filtercondition = 'contains';
        var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
        // used when there are multiple filters on a grid column:
        var filter_or_operator = 1;
        // used when there are multiple filters on the grid:
        filtergroup.operator = 'or';
        filtergroup.addfilter(filter_or_operator, filter);
        //remove other filters
        $(jqxgridid).jqxGrid('addfilter', colname, filtergroup);
        $(jqxgridid).jqxGrid('applyfilters');     
}            
//trigger filter on notification button click


            //## Save Btn Click ----------------------------

            $(document).on('click','.agent-login-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                // alert(datarow);
                if(!datarow){
                    alert('Please select a user');
                    return;
                }
                $('#message').show();
                $('#message').html('Please Wait ....');
                //var userid = $(this).data('userid');
                var userid = datarow.user_id;
                $.ajax({
                    url: self.agentloginurl,
                    type: "POST",
                    data: {'userid' : userid},
                    success: function (data, textStatus, jqXHR) {

                        $('#message').html('Successfully Logged In.');
                        window.location.reload();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });
        }); // end document.ready func

    }, // end users usersgird func
     leads_conversion_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.conversionlisturl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'contact_name' },
                    { name: 'email' },
                  //  { name: 'contact' },
                    { name: 'country' },
                    { name: 'state' },
                    { name: 'city' },
                    { name: 'converted_by' },
                    { name: 'leads_status' },  
                    { name: 'assigned_to' },  
                    { name: 'notes' },                   
                    { name: 'created_at' },
                    { name: 'updated_at' },  
                   // { name: 'viewdetaiils'},
                               
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },
                 sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },
                filter: function (rowid, rowdata) {
                   // alert(1);
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                }
                
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                selectionmode: 'checkbox',
                //selectionmode: 'multiplerowsadvanced',
                pagesizeoptions: ['50', '100', '500'],
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Id', datafield: 'id', width: 50 , editable: false},
                    { text: 'Host Name', datafield: 'contact_name', width: 150, editable: false},
                    { text: 'Host Email', datafield: 'email', width: 150,editable: false }, 
                   // { text: 'Contact', datafield: 'contact', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'Converted By', datafield: 'converted_by', width: 100, editable: false},
                    { text: 'Status', datafield: 'leads_status', width: 100 , editable: false},
                    { text: 'Assigned To', datafield: 'assigned_to', width: 100 ,editable: false},
                    { text: 'Notes', datafield: 'notes', width: 100 ,editable: false},
                    { text: 'created on', datafield: 'created_at', width: 120, editable: false},
                    { text: 'updated on', datafield: 'updated_at', width: 120, editable: false},
                   // { text: 'View details', datafield: 'viewdetaiils', width: 150, editable: false},
                    
                   ]
            });
            $('#viewdetailmodel').on('hidden.bs.modal', function () {
          
               $('#message').html('');
               $('#message').hide();
        
            });

//trigger filter on notification button click
$('body').on('click','.notif-filter',function(){
    set_filter($(this).data('filtercol'),$(this).data('filterval'));
});

$('body').on('click','.reset-filter',function(){
    $(jqxgridid).jqxGrid('clearfilters');
});

function set_filter(colname,val){
        var searchText = val;
        // $("#jqxgrid").jqxGrid('removefilter', 'firstname');
        var filtergroup = new $.jqx.filter();
        var filtervalue = searchText;
        var filtercondition = 'contains';
        var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
        // used when there are multiple filters on a grid column:
        var filter_or_operator = 1;
        // used when there are multiple filters on the grid:
        filtergroup.operator = 'or';
        filtergroup.addfilter(filter_or_operator, filter);
        //remove other filters
        $(jqxgridid).jqxGrid('addfilter', colname, filtergroup);
        $(jqxgridid).jqxGrid('applyfilters');     
}            
//trigger filter on notification button click


               
            $('body').on('click','.view_details',function(){
              
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
               
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $("#viewdetailmodel").modal('show');
                $.ajax({
                    url:'/admin/viewleads',
                    type:"post",
                    data:{
                        '_token': $('#token').val(),
                         'id' :datarow.id
                       
                    },
                    success:function(data)
                    {
                       $('#conversion_details_cont').html('');
                    
                        
                        $('#conversion_details_cont').html(data);
                        
                    }

                });

            });
                $(jqxgridid).bind('cellendedit', function (event) {
                    if (event.args.value) {
                        //alert(event.args.value);
                        $(jqxgridid).jqxGrid('selectrow', event.args.rowindex);
                        //alert();
                    }
                    else {
                        $(jqxgridid).jqxGrid('unselectrow', event.args.rowindex);
                    }
                });

               
                 $('#leads-unassigment').on('hidden.bs.modal', function () {
              
                       $('#message').html('');
                       $('#message').hide();
            
                 });
                 var selectedRecords;

               $('.permisionremove-btn').on('click',function(){

                    selectedRecords = new Array();

                   // var rows = $(jqxgridid).jqxGrid('selectedrowindexes');
                    var pageinfo = $("#jqxgrid").jqxGrid('getpaginginformation');
                    var pagenum = pageinfo.pagenum;
                    var pagesize = pageinfo.pagesize;
                                          //alert(pagesize);
                  
                     var rows = $('#jqxgrid').jqxGrid('selectedrowindexes');

                     var selectedrowlength=0;  
                     if(rows.length > 50 && pagesize == 50)
                     {
                      selectedrowlength = 50;
                     }
                     else if(rows.length > 100 && pagesize == 100)
                     {
                      selectedrowlength = 100;
                     }
                     
                    else if(rows.length > 500 && pagesize == 500)
                     {
                      selectedrowlength = 500;
                     }
                     else
                     {
                       selectedrowlength = rows.length
                     }
                     //alert(selectedrowlength);
                      var rowdata;
                   
                    for (var m = 0; m < selectedrowlength; m++) 
                    {
                        rowdata = $(jqxgridid).jqxGrid('getrowdata', rows[m]);
                        selectedRecords[selectedRecords.length] = rowdata.id;
                    }
                    var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                    if(rowscount==0)
                    {
                        $('#message').show();
                        $('#message').html('Please select a lead  ....');
                        return;
                    }

                     $("#leads-unassigment").modal('show');
               });  
                    
               $('#unassign-leads').on('click',function(){

                    $.ajax({
                    url: '/admin/unassignleads',
                    type: "POST",
                    data: {
                        'leadId' : selectedRecords
                       // 'assignd_by' : $('#leads_user').val()

                         },
                    success: function (data, textStatus, jqXHR) {
                        if(data.success==0)
                        {
                          $("#create-errors").html(data.message);
                        }
                        else
                        {
                            if(data.updatedata>0)
                            {
                            $('#message').show();
                            $('#message').html('Successfully Unassigned  ');
                            $(jqxgridid).jqxGrid('updatebounddata');
                            $(jqxgridid).jqxGrid('clearselection');
                            setTimeout(function(){ 
                              $('#message').html('');
                              $('#message').hide();
                               }, 3000);
                            }
                            $('.error').html(data.errordata)
                           // $('#leads-assigment').modal('hide');
                            $("#jqxgrid").jqxGrid('clearselection');
                            $('#leads_user').val('');
                            $("#leads-unassigment").modal('hide');
                            $(jqxgridid).jqxGrid('updatebounddata')
                          
                         }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });

            $('#leads-assigment').on('hidden.bs.modal', function () {
              
               $('#message').html('');
               $('#message').hide();
            
            });
            var selectedRecords1;
            $('.permision-btn').on('click' ,function(){
                $('#assign_error').html('');
                $('#csvfile').val("");
                selectedRecords1 = new Array();
                //var rows = $(jqxgridid).jqxGrid('selectedrowindexes');
                    var rows = $(jqxgridid).jqxGrid('selectedrowindexes');
                    var pageinfo = $("#jqxgrid").jqxGrid('getpaginginformation');
                    var pagenum = pageinfo.pagenum;
                    var pagesize = pageinfo.pagesize;
                    
                     var selectedrowlength=0;  
                     if(rows.length > 50 && pagesize == 50)
                     {
                      selectedrowlength = 50;
                     }
                     else if(rows.length > 100 && pagesize == 100)
                     {
                      selectedrowlength = 100;
                     }
                     
                    else if(rows.length > 500 && pagesize == 500)
                     {
                      selectedrowlength = 500;
                     }
                     else
                     {
                       selectedrowlength = rows.length
                     }
                     //alert(selectedrowlength);
                      var rowdata;
                
                for (var m = 0; m < selectedrowlength; m++) {
                    rowdata = $(jqxgridid).jqxGrid('getrowdata', rows[m]);
                    selectedRecords1[selectedRecords1.length] = rowdata.id;
                }
                 var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount == 0)
                {
                   // alert();
                $('#message').show();
                $('#message').html('Please Select A Lead  ....');

                }
                else
                {
                    $("#leads-assigment").modal('show');
                }

            });


            $("#assign-leads").on('click',function(){
                
                $('.error').html('');
               // alert(selectedRecords1);
                $.ajax({
                    url: '/admin/assignleads',
                    type: "POST",
                    data: {
                        'leadId' : selectedRecords1,
                        'assignd_by' : $('#leads_user').val()

                         },
                    success: function (data, textStatus, jqXHR) {
                        if(data.success==0)
                        {
                          $("#create-errors").html(data.message);
                        }
                        else
                        {
                            if(data.updatedata==1)
                            {
                            $('#message').show();
                            $('#message').html('Successfully Assigned ');
                             }
                            $('.error').html(data.errordata)
                            $('#leads-assigment').modal('hide');
                            $("#jqxgrid").jqxGrid('clearselection');
                            $('#leads_user').val('');
                              $(jqxgridid).jqxGrid('updatebounddata')
                          
                        }

                     
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 

              });
           
          
        }); // end document.ready func

    }, // end conversion usersgird func
    upload_conversion_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.uploadconversionlisturl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'contact_name' },
                    { name: 'email' },
                    { name: 'contact' },
                    { name: 'room_category_info' },
                    { name: 'rooms' },
                    { name: 'total_listings' },
                    { name: 'country' },
                    { name: 'state' },
                    { name: 'photos_source' },
                    { name: 'converted_by' },
                    { name: 'leads_status' },  
                    { name: 'property_name' },  
                    { name: 'assigned_to' },  
                    { name: 'notes' },                   
                    { name: 'created_at' },
                    { name: 'updated_at' },  
                    //{ name: 'follow_up'},
                               
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },
                 sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },
                filter: function (rowid, rowdata) {
                   // alert(1);
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                updaterow: function (rowid, rowdata, commit) {
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    var id = rowdata.id;
                    var notes = rowdata.notes;
                    //var is_agent = rowdata.is_agent;
                   // var level = rowdata.level;

                    $.ajax({
                    url: '/admin/uploadconversionupd',
                    type: "POST",
                    data: {'lead_id': id, 'notes': notes},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
                
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                selectionmode: 'checkbox',
                //selectionmode: 'multiplerowsadvanced',
                pagesizeoptions: ['50', '100', '500'],
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                   { text: 'Id', datafield: 'id', width: 50 , editable: false},
                    { text: 'Host Name', datafield: 'contact_name', width: 120, editable: false},
                    { text: 'Property Name', datafield: 'property_name', width: 120, editable: false},
                    { text: 'Host Email', datafield: 'email', width: 120,editable: false }, 
                    { text: 'Contact', datafield: 'contact', width: 100, editable: false},
                    { text: 'Room Category Info', datafield: 'room_category_info', width: 200, editable: false},
                    { text: 'Rooms', datafield: 'rooms', width: 100, editable: false},
                    { text: 'Photos Source', datafield: 'photos_source', width: 100, editable: false},
                    { text: 'Listings', datafield: 'total_listings', width: 100, editable: false},
                    
                    { text: 'Notes', datafield: 'notes', width: 170 ,editable: true},

                    { text: 'Status', datafield: 'leads_status', width: 100,editable:false },
                      { text: 'Converted By', datafield: 'converted_by', width: 100, editable: false},
                      { text: 'Country', datafield: 'country', width: 70, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false },
                   
                    { text: 'Created on', datafield: 'created_at', filtercondition : 'CONTAINS', width: 120, editable: false},
                    { text: 'Updated on', datafield: 'updated_at', filtercondition : 'CONTAINS', width: 120, editable: false},
                    //{ text: 'Follow Up', datafield: 'follow_up', width: 150, editable: true},
                  
                    
                   ]
            });
          
        //trigger filter on notification button click
        $('body').on('click','.notif-filter',function(){
            set_filter($(this).data('filtercol'),$(this).data('filterval'));
        });

        $('body').on('click','.reset-filter',function(){
            $(jqxgridid).jqxGrid('clearfilters');
        });

        function set_filter(colname,val){
                var searchText = val;
                // $("#jqxgrid").jqxGrid('removefilter', 'firstname');
                var filtergroup = new $.jqx.filter();
                var filtervalue = searchText;
                var filtercondition = 'contains';
                var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
                // used when there are multiple filters on a grid column:
                var filter_or_operator = 1;
                // used when there are multiple filters on the grid:
                filtergroup.operator = 'or';
                filtergroup.addfilter(filter_or_operator, filter);
                //remove other filters
                $(jqxgridid).jqxGrid('addfilter', colname, filtergroup);
                $(jqxgridid).jqxGrid('applyfilters');     
        }            
        //trigger filter on notification button click
            //## Save Btn Click ----------------------------

           
        }); // end document.ready func

    }, // end conversion usersgird func
    add_conversion_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.leadslisturl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'contact_name' },
                    { name: 'email' },
                    { name: 'contact' },
                    { name: 'country' },
                    { name: 'state' },
                    { name: 'city' },
                    { name: 'address' },
                    { name: 'leads_status' },  
                    { name: 'assigned_to' },  
                    { name: 'notes' },                   
                    { name: 'created_at' },
                    { name: 'updated_at' },  
                    { name: 'follow_up',type: "date"},
                   // { name: 'action'},
                               
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },
                 sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },
                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                 addrow: function (rowid, rowdata, position, commit) {
                    
                    // synchronize with the server - send insert command
                   
                },
                updaterow: function (rowid, rowdata, commit) {
                    var data = "update=true&" + $.param(rowdata);
                    var id = rowdata.id;
                    var followup = rowdata.follow_up;
                    var notes = rowdata.notes;
                    //alert(followup);
                    if(followup !=  '0000-00-00')
                    {
                        //alert(1);
                    var followupdate = followup.getFullYear() + '-' + ('0' + (followup.getMonth()+1) ).slice(-2) + '-' + ('0' + followup.getDate()).slice(-2);
                    }
                    else
                    {
                        followupdate = '0000-00-00';
                    }
                  

                    $.ajax({
                        url: '/admin/followupupdate',
                        type: "POST",
                        data: {'id': id, 'followup': followupdate, 'notes': notes},
                        success: function (data, textStatus, jqXHR) {
                            
                              //$(jqxgridid).jqxGrid('updatebounddata');

                          

                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                        }
                    }); // end ajax 
                    

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                selectionmode: 'checkbox',
                //selectionmode: 'multiplerowsadvanced',
                pagesizeoptions: ['50', '100', '500'],
                 virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Id', datafield: 'id', width: 50 , editable: false},
                    { text: 'Host Name', datafield: 'contact_name', width: 100, editable: false},
                    { text: 'Host Email', datafield: 'email', width: 150,editable: false }, 
                    { text: 'Contact', datafield: 'contact', width: 100, editable: false},
                    { text: 'Address', datafield: 'address', width: 150, editable: false},
                    { text: 'Country', datafield: 'country', width: 80, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false },
                    { text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'Status', datafield: 'leads_status', width: 100,editable: false },
                    { text: 'Notes', datafield: 'notes', width: 200 ,editable: true},
                    { text: 'Created on', datafield: 'created_at', filtercondition : 'CONTAINS', width: 120, editable: false},
                    { text: 'Updated on', datafield: 'updated_at',  filtercondition : 'CONTAINS', width: 120, editable: false},
                    { text: 'Follow Up', datafield: 'follow_up', width: 150, columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd'}
                  
                   ]
            });
          
        //trigger filter on notification button click
        $('body').on('click','.notif-filter',function(){
            set_filter($(this).data('filtercol'),$(this).data('filterval'));
        });

        $('body').on('click','.reset-filter',function(){
            $(jqxgridid).jqxGrid('clearfilters');
        });

        function set_filter(colname,val){
            //alert(3);
                var searchText = val;
                // $("#jqxgrid").jqxGrid('removefilter', 'firstname');
                var filtergroup = new $.jqx.filter();
                var filtervalue = searchText;
                var filtercondition = 'contains';
                var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
                // used when there are multiple filters on a grid column:
                var filter_or_operator = 1;
                // used when there are multiple filters on the grid:
                filtergroup.operator = 'or';
                filtergroup.addfilter(filter_or_operator, filter);
                //remove other filters
                $(jqxgridid).jqxGrid('addfilter', colname, filtergroup);
                $(jqxgridid).jqxGrid('applyfilters');     
        }            
        //trigger filter on notification button click
          
        }); // end document.ready func

    }, // end add leads grid
     manage_conversion_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.manageleadslisturl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'contact_name' },
                    { name: 'email' },
                    { name: 'contact' },
                    { name: 'room_category_info' },
                    { name: 'rooms' },
                    { name: 'total_listings' },
                    { name: 'country' },
                    { name: 'state' },
                    { name: 'photos_source' },
                    { name: 'converted_by' },
                    { name: 'leads_status' },  
                    { name: 'property_name' },  
                    { name: 'assigned_to' },  
                    { name: 'notes' },
                    { name: 'submitted_at' },                  
                    { name: 'created_at' },
                    { name: 'updated_at' },  
                    //{ name: 'follow_up'},
                               
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },
                 sort: function () {
                    //alert(1);
                // update the grid and send a request to the server.
                $(jqxgridid).jqxGrid('updatebounddata', 'sort');
                },
                filter: function (rowid, rowdata) {
                  // alert(1);
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                 addrow: function (rowid, rowdata, position, commit) {
                    
                    // synchronize with the server - send insert command
                   
                },
                 updaterow: function (rowid, rowdata, commit) {
                    
                   // alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    var id = rowdata.id;
                    var status = rowdata.leads_status;
                    var notes = rowdata.notes;
                   

                    $.ajax({
                    url: '/admin/manageconversionstatusupdate',
                    type: "POST",
                    data: {'id': id, 'status': status, 'notes' : notes},
                    success: function (data, textStatus, jqXHR) {
                        if(data.success==1)
                        {
                          //$(jqxgridid).jqxGrid('updatebounddata');

                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 
                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                selectionmode: 'checkbox',
                //selectionmode: 'multiplerowsadvanced',
                pagesizeoptions: ['50', '100', '500'],
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Id', datafield: 'id', width: 50 , editable: false},
                    { text: 'Host Name', datafield: 'contact_name', width: 120, editable: false},
                    { text: 'Property Name', datafield: 'property_name', width: 120, editable: false},
                    { text: 'Host Email', datafield: 'email', width: 120,editable: false }, 
                    { text: 'Contact', datafield: 'contact', width: 100, editable: false},
                    { text: 'Room Category Info', datafield: 'room_category_info', width: 200, editable: false},
                    { text: 'Rooms', datafield: 'rooms', width: 100, editable: false},
                    { text: 'Photos Source', datafield: 'photos_source', width: 100, editable: false},
                    { text: 'Listings', datafield: 'total_listings', width: 100, editable: false},
                    
                    { text: 'Notes', datafield: 'notes', width: 170 ,editable: true},

                    { text: 'Status', datafield: 'leads_status', width: 100,  displayfield: 'leads_status', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: manageconversionAdapter, displayMember: 'status_title', valueMember: 'status_id' });
                        }
                    },
                      { text: 'Converted By', datafield: 'converted_by', width: 100, editable: false},
                      { text: 'Country', datafield: 'country', width: 70, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false },
                    { text: 'Submitted on', datafield: 'submitted_at', filtercondition : 'CONTAINS', width: 120, editable: false},
                    { text: 'Created on', datafield: 'created_at', filtercondition : 'CONTAINS', width: 120, editable: false},
                    { text: 'Updated on', datafield: 'updated_at', filtercondition : 'CONTAINS', width: 120, editable: false},
                    //{ text: 'Follow Up', datafield: 'follow_up', width: 150, editable: true},
                  
                   ]
            });
             
        //trigger filter on notification button click
        $('body').on('click','.notif-filter',function(){
            set_filter($(this).data('filtercol'),$(this).data('filterval'));
        });

        $('body').on('click','.reset-filter',function(){
            $(jqxgridid).jqxGrid('clearfilters');
        });

        function set_filter(colname,val){
                var searchText = val;
                // $("#jqxgrid").jqxGrid('removefilter', 'firstname');
                var filtergroup = new $.jqx.filter();
                var filtervalue = searchText;
                var filtercondition = 'contains';
                var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
                // used when there are multiple filters on a grid column:
                var filter_or_operator = 1;
                // used when there are multiple filters on the grid:
                filtergroup.operator = 'or';
                filtergroup.addfilter(filter_or_operator, filter);
                //remove other filters
                $(jqxgridid).jqxGrid('addfilter', colname, filtergroup);
                $(jqxgridid).jqxGrid('applyfilters');     
        }            
        //trigger filter on notification button click
          
        }); // end document.ready func

    }, // end manage leads grid
    view_conversion_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.viewconversionlisturl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'contact_name' },
                    { name: 'email' },
                    { name: 'contact' },
                    { name: 'country' },
                    { name: 'state' },
                    { name: 'city' },
                    { name: 'converted_by' },
                    { name: 'leads_status' },  
                    { name: 'notes' },                   
                    { name: 'created_at' },
                    { name: 'updated_at' },  
                    //{ name: 'viewdetaiils'},
                    { name: 'action' },                   
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },
                sort: function () {
                    //alert(1);
                // update the grid and send a request to the server.
                $(jqxgridid).jqxGrid('updatebounddata', 'sort');
                },
                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                 updaterow: function (rowid, rowdata, commit) {
                  // alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    var id = rowdata.id;
                    var status = rowdata.leads_status;
                    var notes = rowdata.notes;
                    // var role = rowdata.role_id;
                    // var is_enabled = rowdata.is_enabled;
                    $('.error').html('');

                    $.ajax({
                    url: '/admin/leadconversionupdate',
                    type: "POST",
                    data: {'id': id, 'status': status, 'notes' : notes},
                    success: function (data, textStatus, jqXHR) {
                       
                        if(data.updatedata>0)
                        {  
                         // $(jqxgridid).jqxGrid('updatebounddata');
                      
                        }
                        else
                        {
                            //$(jqxgridid).jqxGrid('updatebounddata');

                        }
                        


                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
               // selectionmode: 'singlerow',
                pagesizeoptions: ['50', '100', '500'],
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
               columns: [
                    { text: 'Id', datafield: 'id', width: 50 , editable: false},
                    { text: 'Host Name', datafield: 'contact_name', width: 200, editable: false},
                    { text: 'Host Email', datafield: 'email', width: 200,editable: false }, 
                    { text: 'Country', datafield: 'country', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'Converted By', datafield: 'converted_by', width: 100, editable: false},
                    { text: 'Status', datafield: 'leads_status', width: 100,  displayfield: 'leads_status', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: adminroleAdapter, displayMember: 'status_title', valueMember: 'status_id' });
                        }
                    },
                    { text: 'Notes', datafield: 'notes', width: 250, editable: true},
                   // { text: 'Assignment', datafield: 'assignment', width: 100 ,columntype: 'checkbox',filtertype: 'bool'},
                    { text: 'created on', datafield: 'created_at', filtercondition : 'CONTAINS', width: 150, editable: false},
                    { text: 'updated on', datafield: 'updated_at', filtercondition : 'CONTAINS', width: 150, editable: false},
                   //{ text: 'View details', datafield: 'viewdetaiils', width: 200, editable: false},
                   { text: 'Action', datafield: 'action', width: 150, editable: false},
                   ]
            });

        //trigger filter on notification button click
        $('body').on('click','.notif-filter',function(){
            set_filter($(this).data('filtercol'),$(this).data('filterval'));
        });

        $('body').on('click','.reset-filter',function(){
            $(jqxgridid).jqxGrid('clearfilters');
        });

        function set_filter(colname,val){
                var searchText = val;
                // $("#jqxgrid").jqxGrid('removefilter', 'firstname');
                var filtergroup = new $.jqx.filter();
                var filtervalue = searchText;
                var filtercondition = 'contains';
                var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
                // used when there are multiple filters on a grid column:
                var filter_or_operator = 1;
                // used when there are multiple filters on the grid:
                filtergroup.operator = 'or';
                filtergroup.addfilter(filter_or_operator, filter);
                //remove other filters
                $(jqxgridid).jqxGrid('addfilter', colname, filtergroup);
                $(jqxgridid).jqxGrid('applyfilters');     
        }            
        //trigger filter on notification button click

       
       
        $('body').on('click','.create_account',function(){

             var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
             var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
               if(!datarow)
              {
                $('.message').show();
                $('.message').html('Please select a Lead ....');
                return;
              }
                $('#createleaduser').modal('show');
               // $('#create-phone').val(datarow.contact);
                $('#create-email').val(datarow.email);
                $('#create-name').val(datarow.contact_name);
        });
        
           
         $('#createleaduser').on('hidden.bs.modal', function () 
         {
              $('#create-password').val('');
              $('#password_confirmation').val('');
              $('#create-user-errors').html('');
               $('#message').hide();
         });


        $('#create-lead-contact').on('click' ,function(){
            var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
            var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
    
             $('#analyticloader').show();
             $('#create-user-errors').html('');
            $.ajax({
                url:self.leaduserurl,
                type:"post",
                data:{
                    '_token': $('#token').val(),
                     'id' :datarow.id,
                     'converted_by' : datarow.converted_by,
                     'country' : datarow.country,
                     'email' : $('#create-email').val(),
                     'name': $('#create-name').val(),
                     //'contact': $('#create-phone').val(),
                     'password': $('#create-password').val(),
                     'password_confirmation': $('#password_confirmation').val()
                },
                success:function(data)
                {
                    //alert(data.login);
                  if(data.success == 0)
                  {
                    $('#create-user-errors').html(data.message);
                    $('#analyticloader').hide();
                  }
                  else
                  {
                    $('#message').show();
                    $('#createleaduser').modal('hide');
                    $('#analyticloader').hide();
                    $('#message').show();
                    $('#message').html(data.message);
                    setTimeout(function(){ 
                              $('#message').html('');
                              $('#message').hide();
                               }, 3000);
                     $("#jqxgrid").jqxGrid('updatebounddata');
                    //location.reload();
                   // $("#jqxgrid").jqxGrid('setcellvalue', selectedrowindex, 'action', data.login);
                   // $(obj).parent().parent().parent().children().eq(12).children().html(data.login);

                  }
                }

            });

    });
   $('#viewdetailmodel').on('hidden.bs.modal', function () {
                  $('#message').hide();
                
              });
       $('body').on('click','.view_details',function(){
          $('.error').html('');
          var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
          var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
          if(!datarow)
            {
                $('#message').show();
                $('#message').html('Please select a Lead .... ');
                return;
            }
           var id=datarow.id;
           var dataarray=[];
           $("#viewdetailmodel").modal('show');
             $.ajax({
                url:'/admin/viewleads',
                type:"post",
                data:{
                    '_token': $('#token').val(),
                     'id' :id
                   
                },
                success:function(data)
                {
                   $('#conversion_details_cont').html('');
                
                  
                    $('#conversion_details_cont').html(data);
                    

                 
                }

        });

   });
                
            //## Save Btn Click ----------------------------

            $(document).on('click','.leaduser-login-btn',function(){

              
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 if(!datarow)
                  {
                    $('.error').html('Please select a Lead ....');
                    return;
                  }
                $('#message').show();
                $('#message').html('Please Wait ....');
                //var userid = $(this).data('userid');
                var userid = $(this).attr('data-id');
                $.ajax({
                    url: self.loginurl,
                    type: "POST",
                    data: {'userid' : userid},
                    success: function (data, textStatus, jqXHR) {

                        $('#message').html('Successfully Logged In.');
                         setTimeout(function(){ 
                              $('#message').html('');
                              $('#message').hide();
                               }, 3000);
                        window.open(self.dashboardurl,'_blank');
                       // window.location.href = self.dashboardurl;
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });
        }); // end document.ready func

    }, // end view conversion usersgird func
     schedulerdashboard_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.photographylisturl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    // { name: 'email' },
                    // { name: 'dial_code' },
                    // { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    // { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'photography_notes' },
                    // {name: 'assigned_to'},
                    { name: 'photo_status' },
                    { name: 'photo_status_title' },
                    { name: 'follow_up_date',type: "date" },
                     { name: 'appointment_date',type: "date" }
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                      //alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);
                   // alert(2);
                    var propertyid = rowdata.id;
                     var notes = rowdata.photography_notes;
                    var photo_status = rowdata.photo_status;
                    var followup = rowdata.follow_up_date;
                    var appointment = rowdata.appointment_date;
                     var followupdate ;
                     //if(followup == null)
                       //followup = '0000-00-00'; 
                    // alert(photo_status);
                    if(followup !=  null)
                    {
                     followupdate = followup.getFullYear() + '-' + ('0' + (followup.getMonth()+1) ).slice(-2) + '-' + ('00' + followup.getDate()).slice(-2)+ ' ' + ('00' + followup.getHours()).slice(-2) + ':' + ('00' + followup.getMinutes()).slice(-2) + ':' + ('00' + followup.getSeconds()).slice(-2);
                    }
                    else
                    {
                        followupdate = '';
                    }
                     var appointment_date ;
                    // alert(followup1+'d');
                    if(appointment !=  null)
                    {
                     appointment_date = appointment.getFullYear() + '-' + ('0' + (appointment.getMonth()+1) ).slice(-2) + '-' + ('00' + appointment.getDate()).slice(-2)+ ' ' + ('00' + appointment.getHours()).slice(-2) + ':' + ('00' + appointment.getMinutes()).slice(-2) + ':' + ('00' + appointment.getSeconds()).slice(-2);
                    }
                    else
                    {
                        appointment_date = '';
                    }
                    
                     //$(jqxgridid).jqxGrid('setcolumnproperty', 'follow_up', 'editable' , true);
                    $.ajax({
                    url: '/admin/schedulerupdate',
                    type: "POST",
                    data: {'propertyid' : propertyid, 'photo_status' : photo_status,'followup' : followupdate,'appointment_date' : appointment_date,'notes' : notes},
                    success: function (data, textStatus, jqXHR) {
                        if(data.appointment_date_fix == 1)
                        {
                           //alert();
                         // $(jqxgridid).jqxGrid('setcolumnproperty', 'follow_up', 'editable' , false);
                          // $('#jqxGrid').jqxGrid('setcolumnproperty', 'follow_up', 'editable', function( row, columnfield, value ){
                                   
                          //          return false;
                          //      }
                          //  );
                        } 

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,

                pagesizeoptions: ['50', '100', '500'],
                selectionmode: 'checkbox',
                virtualmode: true,

                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Property ID', datafield: 'id', width: 90 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 70, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Host Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Notes', datafield: 'photography_notes', width: 170, editable: true},
                    { text: 'Status', datafield: 'status', width: 100, editable: false},
                    { text: 'Photography', datafield: 'photo_status', width: 130,editable: true, displayfield: 'photo_status_title', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: photographystatusAdapter, displayMember: 'photo_status_title', valueMember: 'photo_status_id' });
                        }
                    }, 
                    
                    { text: 'Follow Up', datafield: 'follow_up_date', width: 150, filtercondition : 'CONTAINS',  columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'
                          ,
                        initeditor: function (row, cellvalue, editor) {
                            var today = new Date();
                           var yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 0);
                           //alert(yesterday);
                            editor.jqxDateTimeInput({ minDate: new $.jqx._jqxDateTimeInput.getDateTime(yesterday) });
                        }
                    }, 
                    { text: 'Appointment', datafield: 'appointment_date', width: 150, filtercondition : 'CONTAINS', columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'
                 ,
                        initeditor: function (row, cellvalue, editor) {
                            var today = new Date();
                           var yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 0);
                           //alert(yesterday);
                            editor.jqxDateTimeInput({ minDate: new $.jqx._jqxDateTimeInput.getDateTime(yesterday) });
                        }},        
                  //  { text: 'Assigned To', datafield: 'assigned_to', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    {text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 80, editable: false},
                    //{ text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                    //{ text: 'Created At', datafield: 'created_at', width: 150, filtercondition : 'CONTAINS', editable: false},
                   //{ text: 'Update At', datafield: 'updated_at', width: 150, filtercondition : 'CONTAINS', editable: false}
                    

                    
                ]
            });
            

            //## Save Btn Click --------------------------- -

            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
              if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


        }); // end document.ready func

    }, // end users properties_grid func
     myassignment_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.myassignmenturl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    // { name: 'email' },
                    // { name: 'dial_code' },
                    // { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    // { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'photography_notes' },
                     {name: 'assigned_to'},
                    { name: 'photo_status' },
                    { name: 'photo_status_title' },
                    { name: 'follow_up_date',type: "date" },
                     { name: 'appointment_date',type: "date" }
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                      //alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);
                   // alert(2);
                    var propertyid = rowdata.id;
                      //alert(propertyid);
                    var photo_status = rowdata.photo_status;
                    var notes = rowdata.photography_notes;
                   // alert(photo_status);
                    $.ajax({
                    url: '/admin/photographerstatusupdate',
                    type: "POST",
                    data: {'propertyid' : propertyid, 'photo_status' : photo_status,'notes' : notes},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                //selectionmode: 'checkbox',
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Property ID', datafield: 'id', width: 90 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 70, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Host Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Notes', datafield: 'photography_notes', width: 170, editable: true},
                    { text: 'Status', datafield: 'status', width: 100, editable: false},
                    { text: 'Photography', datafield: 'photo_status', width: 130,editable: true, displayfield: 'photo_status', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: photographystatusAdapter, displayMember: 'photo_status_title', valueMember: 'photo_status_id' });
                        }
                    }, 
                    
                    { text: 'Follow Up', datafield: 'follow_up_date', width: 150, filtercondition : 'CONTAINS', columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'}, 
                    { text: 'Appointment', datafield: 'appointment_date', width: 150, filtercondition : 'CONTAINS', columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'},        
                    { text: 'Assigned To', datafield: 'assigned_to', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    {text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 80, editable: false},
                    //{ text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                    //{ text: 'Created At', datafield: 'created_at', width: 150, filtercondition : 'CONTAINS', editable: false},
                    //{ text: 'Update At', datafield: 'updated_at', width: 150, filtercondition : 'CONTAINS', editable: false}
                    

                    
                ]
            });
            

            //## Save Btn Click --------------------------- -

            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
              if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


        }); // end document.ready func

    }, // end users properties_grid func
     assignphotographer_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.assignmentappointmenturl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    // { name: 'email' },
                    // { name: 'dial_code' },
                    // { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    // { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'photography_notes' },
                     //{name: 'assigned_to'},
                    { name: 'photo_status' },
                    { name: 'photo_status_title' },
                    { name: 'follow_up_date',type: "date" },
                     { name: 'appointment_date',type: "date" }
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                      //alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);
                   // alert(2);
                    var propertyid = rowdata.id;
                    var photo_status = rowdata.photo_status;
                      //alert(photo_status);
                    var notes = rowdata.photography_notes;
                    
                    $.ajax({
                    url: '/admin/assignappointmentsupd',
                    type: "POST",
                    data: {'propertyid' : propertyid, 'notes' : notes,'photo_status' : photo_status},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                selectionmode: 'checkbox',
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Property ID', datafield: 'id', width: 90 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 70, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Host Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Notes', datafield: 'photography_notes', width: 170, editable: true},
                    { text: 'Status', datafield: 'status', width: 100, editable: false},
                    { text: 'Photography', datafield: 'photo_status', width: 130,editable: true, displayfield: 'photo_status', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: assignphotographystatusAdapter, displayMember: 'photo_status_title', valueMember: 'photo_status_id' });
                        }
                    }, 
                    
                    { text: 'Follow Up', datafield: 'follow_up_date', width: 150, editable : false, filtercondition : 'CONTAINS',columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'}, 
                    { text: 'Appointment', datafield: 'appointment_date', width: 150, editable : false, filtercondition : 'CONTAINS',columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'},        
                    //{ text: 'Assigned To', datafield: 'assigned_to', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    {text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 80, editable: false},
                    //{ text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                    //{ text: 'Created At', datafield: 'created_at', width: 150, filtercondition : 'CONTAINS', editable: false},
                    //{ text: 'Update At', datafield: 'updated_at', width: 150, filtercondition : 'CONTAINS', editable: false}
                    

                    
                ]
            });
            

            //## Save Btn Click --------------------------- -

            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
              if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


        }); // end document.ready func

    }, // end users properties_grid func
    assignedphotography_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.assignedphotographyurl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    // { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'photography_notes' },
                     {name: 'assigned_to'},
                     {name: 'completed_on'},
                    { name: 'photo_status' },
                    { name: 'photo_status_title' },
                    { name: 'follow_up_date',type: "date" },
                    { name: 'appointment_date',type: "date" }
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                    
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);
                   // alert(2);
                    var propertyid = rowdata.id;
                      //alert(propertyid);
                    var photo_status = rowdata.photo_status;
                    var notes = rowdata.photography_notes;

                   // alert(photo_status);
                    $.ajax({
                    url: '/admin/assignedphotographyupd',
                    type: "POST",
                    data: {'propertyid' : propertyid, 'photo_status' : photo_status,'photography_notes' : notes},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                selectionmode: 'checkbox',
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Property ID', datafield: 'id', width: 90 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 70, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Host Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Notes', datafield: 'photography_notes', width: 200, editable: true},
                    { text: 'Status', datafield: 'status', width: 100, editable: false},
                    { text: 'Photography', datafield: 'photo_status', width: 130,editable: false}, //displayfield: 'photo_status_title', columntype: 'dropdownlist',
                       // createeditor: function (row, value, editor) {
                            //editor.jqxDropDownList({ source: photographystatusAdapter, displayMember: 'photo_status_title', valueMember: 'photo_status_id' });
                        //}
                   // }, 
                    { text: 'Completed On', datafield: 'completed_on', width: 150 ,filtercondition : 'CONTAINS', editable: false ,columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'}, 
                    { text: 'Follow Up', datafield: 'follow_up_date', width: 150,filtercondition : 'CONTAINS', editable: false ,columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'}, 
                    { text: 'Appointment', datafield: 'appointment_date', width: 150, filtercondition : 'CONTAINS',editable: false ,columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'},        
                    { text: 'Assigned To', datafield: 'assigned_to', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    {text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 80, editable: false},
                    //{ text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                    //{ text: 'Created At', datafield: 'created_at', width: 150, filtercondition : 'CONTAINS', editable: false},
                    //{ text: 'Update At', datafield: 'updated_at', width: 150, filtercondition : 'CONTAINS', editable: false}
                    

                    
                ]
            });
            

            //## Save Btn Click --------------------------- -

            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
              if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


        }); // end document.ready func

    }, // end users properties_grid func
pendingwithbd_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.pendingwithbdurl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    // { name: 'email' },
                    // { name: 'dial_code' },
                    // { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    // { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'photography_notes' },
                     {name: 'assigned_to'},
                    { name: 'photo_status' },
                   // { name: 'photo_status_title' },
                    { name: 'follow_up_date',type: "date" },
                     { name: 'appointment_date',type: "date" }
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                // updaterow: function (rowid, rowdata, commit) {
                //       //alert(1);
                //     // synchronize with the server - send update command
                //     var data = "update=true&" + $.param(rowdata);
                    
                //    // ajax_grid(data,commit,rawurl);
                //    // alert(2);
                //     var propertyid = rowdata.id;
                //       //alert(propertyid);
                //     var photo_status = rowdata.photo_status_title;
                //      //alert(photo_status)
                //     $.ajax({
                //     url: '/admin/photographyupdatebd',
                //     type: "POST",
                //     data: {'propertyid' : propertyid, 'photo_status' : photo_status},
                //     success: function (data, textStatus, jqXHR) {

                //     },
                //     error: function (jqXHR, textStatus, errorThrown) {
                //     // error check
                //     }
                //     }); // end ajax 

                // }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                //selectionmode: 'checkbox',
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Property ID', datafield: 'id', width: 90 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 70, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Host Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Notes', datafield: 'photography_notes', width: 200, editable: false},
                    { text: 'Status', datafield: 'status', width: 100, editable: false},
                    { text: 'Photography', datafield: 'photo_status', width: 130,editable: false},
                    
                    { text: 'Follow Up', datafield: 'follow_up_date', width: 150,filtercondition : 'CONTAINS', columntype: 'datetimeinput', editable: false, align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'}, 
                    { text: 'Appointment', datafield: 'appointment_date', width: 150,filtercondition : 'CONTAINS', columntype: 'datetimeinput',  editable: false,align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'},        
                    { text: 'Assigned To', datafield: 'assigned_to', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    {text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 80, editable: false},
                    //{ text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                    //{ text: 'Created At', datafield: 'created_at', width: 150, filtercondition : 'CONTAINS', editable: false},
                    //{ text: 'Update At', datafield: 'updated_at', width: 150, filtercondition : 'CONTAINS', editable: false}
                    

                    
                ]
            });
            

            //## Save Btn Click --------------------------- -

            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
              if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


        }); // end document.ready func

    }, // end users properties_grid func

mycallinglist_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.mycallinglisturl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    // { name: 'email' },
                    // { name: 'dial_code' },
                    // { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    // { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'photography_notes' },
                     {name: 'executive_schedular_id'},
                    { name: 'photo_status' },
                    { name: 'photo_status_title' },
                    { name: 'follow_up_date',type: "date" },
                    { name: 'appointment_date',type: "date" }
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                      //alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);
                   // alert(2);
                    var propertyid = rowdata.id;
                     var notes = rowdata.photography_notes;
                    var photo_status = rowdata.photo_status;
                    var followup = rowdata.follow_up_date;
                    var appointment = rowdata.appointment_date;
                     var followupdate ;
                     //if(followup == null)
                       //followup = '0000-00-00'; 
                    // alert(followup+'d'+appointment);
                    if(followup !=  null)
                    {
                     followupdate = followup.getFullYear() + '-' + ('0' + (followup.getMonth()+1) ).slice(-2) + '-' + ('00' + followup.getDate()).slice(-2)+ ' ' + ('00' + followup.getHours()).slice(-2) + ':' + ('00' + followup.getMinutes()).slice(-2) + ':' + ('00' + followup.getSeconds()).slice(-2);
                    }
                    else
                    {
                        followupdate = '';
                    }
                     var appointment_date ;
                    // alert(followup1+'d');
                    if(appointment !=  null)
                    {
                     appointment_date = appointment.getFullYear() + '-' + ('0' + (appointment.getMonth()+1) ).slice(-2) + '-' + ('00' + appointment.getDate()).slice(-2)+ ' ' + ('00' + appointment.getHours()).slice(-2) + ':' + ('00' + appointment.getMinutes()).slice(-2) + ':' + ('00' + appointment.getSeconds()).slice(-2);
                    }
                    else
                    {
                        appointment_date = '';
                    }
                    
                      //alert(photo_status);
                    $.ajax({
                    url: '/admin/mycallinglistupd',
                    type: "POST",
                    data: {'propertyid' : propertyid, 'photo_status' : photo_status,'followup' : followupdate,'appointment_date' : appointment_date,'notes' : notes},
                    success: function (data, textStatus, jqXHR) {

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                //selectionmode: 'checkbox',
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Property ID', datafield: 'id', width: 90 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 70, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Host Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Notes', datafield: 'photography_notes', width: 170, editable: true},
                    { text: 'Status', datafield: 'status', width: 100, editable: false},
                    { text: 'Photography', datafield: 'photo_status', width: 130,editable: true, displayfield: 'photo_status', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: photographystatusAdapter, displayMember: 'photo_status_title', valueMember: 'photo_status_id' });
                        }
                    }, 
                    
                    { text: 'Follow Up', datafield: 'follow_up_date', width: 150, filtercondition : 'CONTAINS', columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'
                 ,
                        initeditor: function (row, cellvalue, editor) {
                            var today = new Date();
                           var yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 0);
                           //alert(yesterday);
                            editor.jqxDateTimeInput({ minDate: new $.jqx._jqxDateTimeInput.getDateTime(yesterday) });
                        }}, 
                    { text: 'Appointment', datafield: 'appointment_date', width: 150,filtercondition : 'CONTAINS', columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'
                 ,
                        initeditor: function (row, cellvalue, editor) {
                            var today = new Date();
                           var yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 0);
                           //alert(yesterday);
                            editor.jqxDateTimeInput({ minDate: new $.jqx._jqxDateTimeInput.getDateTime(yesterday) });
                        }
                    },        
                    { text: 'Assigned To', datafield: 'executive_schedular_id', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    {text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 80, editable: false},
                    //{ text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                   // { text: 'Created At', datafield: 'created_at', width: 150, filtercondition : 'CONTAINS', editable: false},
                    //{ text: 'Update At', datafield: 'updated_at', width: 150, filtercondition : 'CONTAINS', editable: false}
                    

                    
                ]
            });
            

            //## Save Btn Click --------------------------- -

            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
              if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


        }); // end document.ready func

    }, // end users properties_grid func
   photographycompleted_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.photographycompletedurl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    // { name: 'email' },
                    // { name: 'dial_code' },
                    // { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    // { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'photography_notes' },
                    // {name: 'executive_schedular_id'},
                    { name: 'photo_status' },
                    {name: 'completed_on'},
                    { name: 'assigned_to' },
                    { name: 'follow_up_date',type: "date" },
                     { name: 'appointment_date',type: "date" }
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                      //alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);
                   // alert(2);
                    var propertyid = rowdata.id;
                     var notes = rowdata.photography_notes;
                    var photo_status = rowdata.photo_status;
                    
                    
                    // alert(photo_status+rowdata.photo_status_title);
                    $.ajax({
                    url: '/admin/completedphotographyupd',
                    type: "POST",
                    data: {'propertyid' : propertyid, 'photo_status' : photo_status,'notes' : notes},
                    success: function (data, textStatus, jqXHR) {
                        if(data.updatedata >=1)
                        {

                        }
                        else
                        {
                            //$('#message').show();
                            //$('#message').html('Please  upload  property picture  first ....'); 
                           // setTimeout(function(){ 
                             // $('#message').html('');
                              //$('#message').hide();
                              // }, 3000);
                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                //selectionmode: 'checkbox',
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Property ID', datafield: 'id', width: 90 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 70, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Host Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Notes', datafield: 'photography_notes', width: 170, editable: true},
                    { text: 'Status', datafield: 'status', width: 100, editable: false},
                    { text: 'Photography', datafield: 'photo_status', width: 120,editable: true, displayfield: 'photo_status', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: photographystatusAdapter, displayMember: 'photo_status_title', valueMember: 'photo_status_id' });
                        }
                    }, 
                    
                  
                            
                    { text: 'Assigned To', datafield: 'assigned_to', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    {text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 80, editable: false},
                     { text: 'Completed On', datafield: 'completed_on', width: 150,filtercondition : 'CONTAINS', columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'}
                    //{ text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                    //{ text: 'Created At', datafield: 'created_at', width: 150, filtercondition : 'CONTAINS', editable: false},
                    //{ text: 'Update At', datafield: 'updated_at', width: 150, filtercondition : 'CONTAINS', editable: false}
                    

                    
                ]
            });
            

            //## Save Btn Click --------------------------- -

            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
              if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


        }); // end document.ready func

    }, // end users properties_grid func
    completed_conversion_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.completeleadlisturl;
            var fields=new Array('id','name','email');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'contact_name' },
                    { name: 'email' },
                  //  { name: 'contact' },
                    { name: 'country' },
                    { name: 'state' },
                    { name: 'city' },
                    { name: 'converted_by' },
                    { name: 'leads_status' },  
                    { name: 'assigned_to' },  
                    { name: 'notes' }, 
                      { name: 'completed' } ,                
                    { name: 'created_at' },
                    { name: 'updated_at' },  
                   // { name: 'viewdetaiils'},
                               
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },
                 sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },
                filter: function (rowid, rowdata) {
                   // alert(1);
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                updaterow: function (rowid, rowdata, commit) {
                    
                   // alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    var id = rowdata.id;
                    var status = rowdata.leads_status;
                    var notes = rowdata.notes;
                   

                    $.ajax({
                    url: '/admin/complestatusupd',
                    type: "POST",
                    data: {'id': id, 'status': status, 'notes' : notes},
                    success: function (data, textStatus, jqXHR) {
                        if(data.success==1)
                        {
                          //$(jqxgridid).jqxGrid('updatebounddata');

                        }
                    }
                });

                    },
                
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 400,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                //selectionmode: 'checkbox',
                //selectionmode: 'none',
                pagesizeoptions: ['50', '100', '500'],
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Id', datafield: 'id', width: 50 , editable: false},
                    { text: 'Host Name', datafield: 'contact_name', width: 150, editable: false},
                    { text: 'Host Email', datafield: 'email', width: 150,editable: false }, 
                   // { text: 'Contact', datafield: 'contact', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'Converted By', datafield: 'converted_by', width: 100, editable: false},
                    { text: 'Status', datafield: 'leads_status', width: 100,  displayfield: 'leads_status', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: completeconversionAdapter, displayMember: 'status_title', valueMember: 'status_id' });
                        }
                    },
                    { text: 'Notes', datafield: 'notes', width: 130 ,editable: true},
                     { text: 'Completed', datafield: 'completed', width: 70 ,editable: false},
                    { text: 'Assigned To', datafield: 'assigned_to', width: 100 ,editable: false},
                    
                    { text: 'created on', datafield: 'created_at', width: 120, filtercondition : 'CONTAINS', editable: false},
                    { text: 'updated on', datafield: 'updated_at', width: 120,  filtercondition : 'CONTAINS',editable: false},
                   // { text: 'View details', datafield: 'viewdetaiils', width: 150, editable: false},
                    
                   ]
            });

        //trigger filter on notification button click
        $('body').on('click','.notif-filter',function(){
            set_filter($(this).data('filtercol'),$(this).data('filterval'));
        });

        $('body').on('click','.reset-filter',function(){
            $(jqxgridid).jqxGrid('clearfilters');
        });

        function set_filter(colname,val){
                var searchText = val;
                // $("#jqxgrid").jqxGrid('removefilter', 'firstname');
                var filtergroup = new $.jqx.filter();
                var filtervalue = searchText;
                var filtercondition = 'contains';
                var filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);
                // used when there are multiple filters on a grid column:
                var filter_or_operator = 1;
                // used when there are multiple filters on the grid:
                filtergroup.operator = 'or';
                filtergroup.addfilter(filter_or_operator, filter);
                //remove other filters
                $(jqxgridid).jqxGrid('addfilter', colname, filtergroup);
                $(jqxgridid).jqxGrid('applyfilters');     
        }            
        //trigger filter on notification button click

        });


     },
     assignedexescheduler_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.assignedexeschedulerurl;
            var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [
                    { name: 'id' },
                    { name: 'user_id' },
                    { name: 'name' },
                    // { name: 'email' },
                    // { name: 'dial_code' },
                    // { name: 'contact' },
                    // { name: 'secondry_contact' },
                    { name: 'title' },
                    { name: 'property_type_title' },
                    { name: 'search_keyword' },
                    // { name: 'address' },
                    { name: 'area' },
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'zipcode' },
                    { name: 'status' },
                    { name: 'status_title' },
                    { name: 'enabled' },
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'deleted_at' },
                    { name: 'featured' },
                    { name: 'admin_score' },
                    { name: 'payment_detail' },
                    { name: 'photography_notes' },
                     {name: 'executive_schedular_id'},
                    { name: 'photo_status' },
                    { name: 'photo_status_title' },
                    { name: 'follow_up_date',type: "date" },
                    { name: 'appointment_date',type: "date" }
                ],
                id: 'id',
                url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                      //alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);
                   // alert(2);
                    var propertyid = rowdata.id;
                     var notes = rowdata.photography_notes;
                    var photo_status = rowdata.photo_status;
                    var followup = rowdata.follow_up_date;
                    var appointment = rowdata.appointment_date;
                     var followupdate ;
                     //if(followup == null)
                       //followup = '0000-00-00'; 
                    // alert(followup+'d'+appointment);
                  

                }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],
                selectionmode: 'checkbox',
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                    { text: 'Property ID', datafield: 'id', width: 90 , editable: false},
                    { text: 'User ID', datafield: 'user_id', width: 70, editable: false},
                    { text: 'Property Score', datafield: 'admin_score', width: 100, editable: false},
                    { text: 'Host Name', datafield: 'name', width: 150, editable: false},
                    { text: 'Notes', datafield: 'photography_notes', width: 170, editable: false},
                    { text: 'Status', datafield: 'status', width: 100, editable: false},
                    { text: 'Photography', datafield: 'photo_status', width: 130,editable: false, displayfield: 'photo_status'}, 
                    //columntype: 'dropdownlist',
                        //createeditor: function (row, value, editor) {
                          //  editor.jqxDropDownList({ source: photographystatusAdapter, displayMember: 'photo_status_title', valueMember: 'photo_status_id' });
                        //}
                   // }, 
                    
                    { text: 'Follow Up', datafield: 'follow_up_date', width: 150, filtercondition : 'CONTAINS', editable: false ,columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'
                 ,
                        initeditor: function (row, cellvalue, editor) {
                            var today = new Date();
                           var yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 0);
                           //alert(yesterday);
                            editor.jqxDateTimeInput({ minDate: new $.jqx._jqxDateTimeInput.getDateTime(yesterday) });
                        }}, 
                    { text: 'Appointment', datafield: 'appointment_date', width: 150,filtercondition : 'CONTAINS', editable: false, columntype: 'datetimeinput', align: 'left', cellsalign: 'left', cellsformat: 'yyyy-MM-dd HH:mm:ss'
                 ,
                        initeditor: function (row, cellvalue, editor) {
                            var today = new Date();
                           var yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 0);
                           //alert(yesterday);
                            editor.jqxDateTimeInput({ minDate: new $.jqx._jqxDateTimeInput.getDateTime(yesterday) });
                        }
                    },        
                    { text: 'Assigned To', datafield: 'executive_schedular_id', width: 100, editable: false},
                    { text: 'Type', datafield: 'property_type_title', width: 100, editable: false},
                    {text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 80, editable: false},
                    //{ text: 'Zipcode', datafield: 'zipcode', width: 100, editable: false},
                   // { text: 'Created At', datafield: 'created_at', width: 150, filtercondition : 'CONTAINS', editable: false},
                    //{ text: 'Update At', datafield: 'updated_at', width: 150, filtercondition : 'CONTAINS', editable: false}
                    

                    
                ]
            });
            

            //## Save Btn Click --------------------------- -

            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
              if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


        }); // end document.ready func

    }, // end users properties_grid func
    reviewmonitring_grid : function(){
        var self = this;

        $(document).ready(function () {
            var rawurl= self.reviewmonitringurl;
             var fields=new Array('id','user_id','name','email','title','status_title','created_at','updated_at','deleted_at');
            var jqxgridid='#jqxgrid';
           
            var source =
            {
                datatype: "json",
                cache: false,
                datafields: [

                    { name: 'booking_request_id'},
                    { name: 'review_id'},
                    { name: 'id' },
                    { name: 'host_name' },
                    { name: 'traveller_name' },
                   
                    { name: 'city' },
                    { name: 'state' },
                    { name: 'country' },
                    { name: 'host_id' },
                    { name: 'traveller_id' },
                    { name: 'status_title' },
                    
                    { name: 'created_at' },
                    { name: 'updated_at' },
                    { name: 'from_date' },
                    { name: 'to_date' },
                    { name: 'booking_status' },
                    { name: 'comments' },
                    { name: 'reply' },
                    { name: 'review_status' }
                ],
                id: 'booking_request_id',
                 url: rawurl,
                root: 'Rows',
                beforeprocessing: function(data)
                {       
                    source.totalrecords = data[0].TotalRows;
                    
                },

                sort: function () {
                // update the grid and send a request to the server.
                $("#jqxgrid").jqxGrid('updatebounddata', 'sort');
                },

                filter: function (rowid, rowdata) {
                    // update the grid and send a request to the server.
                    $(jqxgridid).jqxGrid('updatebounddata', 'filter');
                },
                addrow: function (rowid, rowdata, position, commit) {
                    // synchronize with the server - send insert command
                    var data = "insert=true&" + $.param(rowdata);
                    ajax_grid(data,commit,rawurl);
                },
                deleterow: function (rowid, commit) {
                    // synchronize with the server - send delete command
                    var data = "delete=true&" + $.param({ id: rowid });
                    ajax_grid(data,commit,rawurl);
                },
                updaterow: function (rowid, rowdata, commit) {
                      //alert(1);
                    // synchronize with the server - send update command
                    var data = "update=true&" + $.param(rowdata);
                    
                   // ajax_grid(data,commit,rawurl);
                   // alert(2);

                    var review_id = rowdata.review_id;
                    var review_status = rowdata.review_status;
                    //alert(review_status);
                    $.ajax({
                    url: '/admin/approvedreview',
                    type: "POST",
                    data: {'review_id' : review_id,'review_status' : review_status},
                    success: function (data, textStatus, jqXHR) {
                        if(data.updatedata >=1)
                        {

                        }
                        else
                        {
                            $('#message').show();
                             $("#jqxgrid").jqxGrid('clearselection');
                            $('#message').html('Please  give rivew this property first ....'); 
                           setTimeout(function(){ 
                             $('#message').html('');
                              $('#message').hide();
                              }, 3000);
                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    // error check
                    }
                    }); // end ajax 
       }
            };

            var dataAdapter = new $.jqx.dataAdapter(source);

            // initialize jqxGrid
            $(jqxgridid).jqxGrid(
            {
                width: '100%',
                height: 450,
                source: dataAdapter,
                theme: theme,
                editable: true,
                showfilterrow: true,
                filterable: true,
                sortable: true,
                pageable: true,
                pagesize: 50,
                pagesizeoptions: ['50', '100', '500'],

                //selectionmode: 'checkbox',
                virtualmode: true,
                rendergridrows: function()
                {
                      return dataAdapter.records;     
                },
                columns: [
                 { text: 'Booking ID', datafield: 'booking_request_id', width: 90 , editable: false},  
                    { text: 'Review ID', datafield: 'review_id', width: 90 , editable: false},  
                    { text: 'Property ID', datafield: 'id', width: 90 , editable: false},
                    { text: 'Host', datafield: 'host_name', width: 100, editable: false},
                    { text: 'Traveller', datafield: 'traveller_name', width: 100, editable: false},
                    { text: 'Country', datafield: 'country', width: 100, editable: false},
                    { text: 'State', datafield: 'state', width: 100, editable: false},
                    { text: 'City', datafield: 'city', width: 100, editable: false},
                    { text: 'Status', datafield: 'status_title', width: 100, editable: false},
                     { text: 'Review Status', datafield: 'review_status', width: 100,  displayfield: 'review_status', columntype: 'dropdownlist',
                        createeditor: function (row, value, editor) {
                            editor.jqxDropDownList({ source: reviewAdapter, displayMember: 'review_status_title', valueMember: 'review_status_id' });
                        }
                    },
                    { text: 'FromDate To', datafield: 'from_date', width: 100, editable: false},
                    { text: 'ToDate', datafield: 'to_date', width: 100, editable: false},
                    { text: 'Comments', datafield: 'comments', width: 200, editable: false},
                    { text: 'Reply', datafield: 'reply', width: 200, editable: false},
                    
                    { text: 'Created At', datafield: 'created_at', width: 150, filtercondition : 'CONTAINS', editable: false},
                    { text: 'Update At', datafield: 'updated_at', width: 150, filtercondition : 'CONTAINS', editable: false}
                        ]
            });
            

            //## Save Btn Click --------------------------- -

            $(document).on('click','#viewproperty-btn',function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
              if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                //var userid = $(this).data('userid');
                var propertyid = datarow.id;
                var userid = datarow.user_id;
                window.open(self.propertiespreviewurl + propertyid,'_blank'); 

            });
            
            $('#viewcontact-btn').click(function(){
                // $(this).val('Wait..');
               
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }
                $.ajax({
                    url: '/admin/viewusercontact',
                    type: "POST",
                    data: {'user_id' : datarow.user_id},
                    success: function (data, textStatus, jqXHR) {
                        //$('.carousel-inner').html(data);
                        $('#contact_modal').find('#user_contact_info').html(data);

                        $('#contact_modal').modal('show');

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


            $('#viewaddress-btn').click(function(){
                var selectedrowindex = $(jqxgridid).jqxGrid('getselectedrowindex');
                var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                 //var datarow = $(jqxgridid).jqxGrid('getrowdata', selectedrowindex);
                var rowscount = $(jqxgridid).jqxGrid('getselectedrowindexes').length;
                if(rowscount>1)
                {
                     $('#message').show();
                     $("#jqxgrid").jqxGrid('clearselection');
                     $('#message').html('Please select a  single lead  ....');
                     return;

                }
                else if(rowscount == 0)
                {
                    $('#message').show();
                    $('#message').html('Please select a lead  ....');
                    return;
                    
                }

                $.ajax({
                    url: '/admin/viewpropertyaddress',
                    type: "POST",
                    data: {'property_id' : datarow.id},
                    success: function (data, textStatus, jqXHR) {
                        $('#address_modal').find('#property_address_info').html(data);
                        $('#address_modal').modal('show');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // error check
                    }
                }); // end ajax 
            });


        }); // end document.ready func

    }, // end users properties_grid func


    

}

